{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ba9cda575a0bba1218ccf2b18e741e9f26bb960e","modified":1489976245000},{"_id":"themes/next/.DS_Store","hash":"30d4f2d0d85f4a5d6e9d2227331cd24e4e4fe065","modified":1490337086000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489973120000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1489973120000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1489973120000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1489973120000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489973120000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1489973120000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489973120000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489973120000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1489973120000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489973120000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1489973120000},{"_id":"themes/next/_config.yml","hash":"43a5e918fd0b89d7de9c3ea733f57094941f7313","modified":1490338065000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1489973120000},{"_id":"themes/next/wechatpay.jpg","hash":"3681d8a0822a9db9e4d30d9c05a2fe9b5dcf5c79","modified":1490337436000},{"_id":"source/_posts/Blocks-in-iOS.md","hash":"5f6464b2a8ed13c296edea22badddd460d26bd40","modified":1490059488000},{"_id":"source/_posts/C-C-Dev.md","hash":"236882aeacccdd50f192fc274000246cdaadcceb","modified":1489973120000},{"_id":"source/_posts/Python-Dev.md","hash":"099c7195364184b707968b052af8ca12b9511fae","modified":1490872577000},{"_id":"source/_posts/hello-world.md","hash":"a26d9579c68b8753693eca2d6dcda2687ecfcd0b","modified":1489973120000},{"_id":"source/_posts/hexo使用手册.md","hash":"7d90d7540a466e55bae719b75f2012c983de38b3","modified":1489973120000},{"_id":"source/_posts/iOS-Dev.md","hash":"42a0b15c4e0cd735c433c53cf342a31b57fe5e2a","modified":1490167349000},{"_id":"source/_posts/学习资源大全.md","hash":"30fec7cb8bf20b5f9ecb9271fbbb284fde5ef2b0","modified":1489973120000},{"_id":"source/about/index.md","hash":"593ff78ffb1249515acdf2706e054936a6f7d0de","modified":1489973120000},{"_id":"source/categories/index.md","hash":"685fce153e4a05181bff38c54516f7b976ab7e40","modified":1489973120000},{"_id":"source/tags/index.md","hash":"c711d5a178132a5d33835cb92b27dbd248d67583","modified":1489973120000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1489973120000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1489973120000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1489973120000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489973120000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489973120000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1489973120000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1489973120000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1489973120000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1489973120000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1489973120000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1489973120000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1489973120000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1489973120000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1489973120000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1489973120000},{"_id":"themes/next/layout/.DS_Store","hash":"debfb81f96c918d920c45acae876f3e511e2d177","modified":1490337190000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1489973120000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1489973120000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1489973120000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1489973120000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1489973120000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489973120000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489973120000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1489973120000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489973120000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489973120000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489973120000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1489973120000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1489973120000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489973120000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489973120000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489973120000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1489973120000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489973120000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1489973120000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489973120000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489973120000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1489973120000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1489973120000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489973120000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489973120000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489973120000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1489973120000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489973120000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489973120000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1489973120000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1489973120000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489973120000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489973120000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1489973120000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1489973120000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489973120000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1489973120000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489973120000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1489973120000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489973120000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489973120000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489973120000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489973120000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489973120000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489973120000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489973120000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489973120000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489973120000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489973120000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489973120000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489973120000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489973120000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489973120000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489973120000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489973120000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1489973120000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489973120000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489973120000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1489973120000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1489973120000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1489973120000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489973120000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489973120000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1489973120000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1489973120000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489973120000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1489973120000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1489973120000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489973120000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489973120000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1489973120000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489973120000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1489973120000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489973120000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1489973120000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1489973120000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489973120000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489973120000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489973120000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489973120000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489973120000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1489973120000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489973120000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489973120000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489973120000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489973120000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489973120000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1489973120000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1489973120000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489973120000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489973120000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489973120000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1489973120000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489973120000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489973120000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489973120000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489973120000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1489973120000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1489973120000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1489973120000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489973120000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1489973120000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489973120000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1489973120000}],"Category":[{"name":"iOS","_id":"cj0wb1wr40003sjveb3r63tz9"},{"name":"C/C++","_id":"cj0wb1wrf0008sjvefxwqry1b"},{"name":"Python","_id":"cj0wb1wrk000dsjvefwygbn8y"},{"name":"Hexo","_id":"cj0wb1wrn000isjvelh53f3ft"},{"name":"学习资源","_id":"cj0wb1wrq000psjve7g96r229"}],"Data":[],"Page":[{"title":"about","date":"2017-03-19T09:16:48.000Z","type":"about","comments":0,"_content":"日前由于各大笔记都开始收费，本人甚觉得还不如自己整一Blog，因些本Blog多为笔记耳。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-19 17:16:48\ntype: \"about\"\ncomments: false\n---\n日前由于各大笔记都开始收费，本人甚觉得还不如自己整一Blog，因些本Blog多为笔记耳。\n","updated":"2017-03-20T01:25:20.000Z","path":"about/index.html","layout":"page","_id":"cj0wb1wr10001sjveubtzalq0","content":"<p>日前由于各大笔记都开始收费，本人甚觉得还不如自己整一Blog，因些本Blog多为笔记耳。</p>\n","excerpt":"","more":"<p>日前由于各大笔记都开始收费，本人甚觉得还不如自己整一Blog，因些本Blog多为笔记耳。</p>\n"},{"title":"tags","date":"2017-03-19T09:14:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-19 17:14:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-20T01:25:20.000Z","path":"tags/index.html","layout":"page","_id":"cj0wb1wx20013sjveal5t30kb","content":"","excerpt":"","more":""},{"title":"categories","date":"2017-03-19T09:12:45.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-19 17:12:45\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-20T01:25:20.000Z","path":"categories/index.html","layout":"page","_id":"cj0wb1wx30014sjvegey7b3l7","content":"","excerpt":"","more":""}],"Post":[{"title":"Blocks in iOS","date":"2017-03-19T03:01:20.000Z","_content":"> 最近由于工作原因，对iOS Block进行一次学习,本篇文章对Block的内存使用相关的内容简要整理一下，解释其中一些原理和使用Block需要注意的问题 。\n\n<!--More-->\n\n# 一、关于Block的内存表示\n## 1.1、`clang -rewite-objc 源文件 -o 目标文件（可以为.txt）`\n+ 首先我们来看一段常见源码，通过上述命令查看其中间文件：\n\n```     \n\n\ttypedef void (^ test1) (BOOL success, NSError *error) ;\n\n\tint main(int argc, char * argv[]) {\n\t    @autoreleasepool {\n\t        int base =10;\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t            // int *b  = (int*)malloc(10*sizeof(int));\n\t            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) {\n\t                NSLog(@\"sssss:%d,base:%d\",success,base);\n\t            } ;\n\t            test(1,nil);\n\t           \n\t        }\n\t\n\t//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n\t    }\n\t}\n\n```\n\n+ 通过sublime打开目标文件会发现代码远不止上面那寥寥几行，不难从其中可以找到如下与Block相关的代码。\n\n```\n\n\tstruct __block_impl {\n  \t\tvoid *isa;\n  \t\tint Flags;\n  \t\tint Reserved;\n  \t\tvoid *FuncPtr;\n\t};\n```\n\n`struct __block_impl`就是block的真面目，结构还是相当清晰。`isa`对OC开发人员再熟悉不过，是表示其类型或者说本质的，block有三种类型`NSGlobalBlock`，`NSStackBlock`,`NSMallocBlock`，不同类型的block就是通过这个字段区分。然后就是`FuncPtr`，顾名思义就是指向某一函数的指针。其实block本质上与c语言中的函数指针是一样的。\n\n```   \n\n\tstruct __main_block_impl_0 {\n\t  struct __block_impl impl;\n\t  struct __main_block_desc_0* Desc;\n\t  int base;\n\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _base, int flags=0) : base(_base) {\n\t    impl.isa = &_NSConcreteStackBlock;\n\t    impl.Flags = flags;\n\t    impl.FuncPtr = fp;\n\t    Desc = desc;\n\t  }\n\t};\n\t\n\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) {\n\t  int base = __cself->base; // bound by copy\n\t\n\t                NSLog((NSString *)&__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_0c0cda_mi_0,success,base);\n\t            }\n\n\tstatic struct __main_block_desc_0 {\n\t  size_t reserved;\n\t  size_t Block_size;\n\t} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n```\n\n\tint main(int argc, char * argv[]) {\n\t    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\t        int base =10;\n\t\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t\n\t            void (* test) (BOOL success, NSError *error)= (void (*)(BOOL, NSError *))((id (*)(id, SEL))(void *)objc_msgSend)((id)((void (*)(BOOL, NSError *))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, base)), sel_registerName(\"copy\"));\n\t            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)->FuncPtr)((__block_impl *)test, 1, __null);\n\t\n\t    }\n\t}\n```\n以上这一段代码正是与源码相对应的`struct __main_block_impl_0`是此处block的真正实现，主要分为两部分一个是block的定义一个是block的一些描述。`__main_block_func_0`是具体执行的函数体。接下来就是要`main`函数体中初始化block，然后就大功告成可以便可享用block。\n以上揭示了block的本质。\n# 二、关于Block类型\n# 三、__block变量\n```\n\n\ttypedef void (^ test1) (BOOL success, NSError *error) ;\n\n\tint main(int argc, char * argv[]) {\n\t    @autoreleasepool {\n\t        int base =10;\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t            // int *b  = (int*)malloc(10*sizeof(int));\n\t            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) {\n\t                NSLog(@\"sssss:%d,base:%d\",success,base);\n\t            } ;\n\t            test(1,nil);\n\t           \n\t        }\n\t\n\t//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n\t    }\n\t}\n\n```\n\n\n```\n\n\tstruct __Block_byref_base_0 {\n\t  void *__isa;\n\t__Block_byref_base_0 *__forwarding;\n\t int __flags;\n\t int __size;\n\t int base;\n\t};\n\n\tstruct __main_block_impl_0 {\n\t  struct __block_impl impl;\n\t  struct __main_block_desc_0* Desc;\n\t  __Block_byref_base_0 *base; // by ref\n\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_base_0 *_base, int flags=0) : base(_base->__forwarding) {\n\t    impl.isa = &_NSConcreteStackBlock;\n\t    impl.Flags = flags;\n\t    impl.FuncPtr = fp;\n\t    Desc = desc;\n\t  }\n\t};\n\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) {\n\t  __Block_byref_base_0 *base = __cself->base; // bound by ref\n\t\n\t                NSLog((NSString *)&__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_5fdc20_mi_0,success,(base->__forwarding->base));\n\t            }\n\tstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->base, (void*)src->base, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\t\n\tstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->base, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\t\n\tstatic struct __main_block_desc_0 {\n\t  size_t reserved;\n\t  size_t Block_size;\n\t  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\n\t  void (*dispose)(struct __main_block_impl_0*);\n\t} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\tint main(int argc, char * argv[]) {\n\t    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\t        __attribute__((__blocks__(byref))) __Block_byref_base_0 base = {(void*)0,(__Block_byref_base_0 *)&base, 0, sizeof(__Block_byref_base_0), 10};\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t\n\t            void (* test) (BOOL success, NSError *error)= ((void (*)(BOOL, NSError *))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, (__Block_byref_base_0 *)&base, 570425344)) ;\n\t            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)->FuncPtr)((__block_impl *)test, 1, __null);\n\t\n\t        }\n\t\n\t\n\t    }\n\t}\n```\n","source":"_posts/Blocks-in-iOS.md","raw":"---\ntitle: Blocks in iOS\ndate: 2017-03-19 11:01:20\ncategories: iOS\ntags: [iOS, Dev]\n---\n> 最近由于工作原因，对iOS Block进行一次学习,本篇文章对Block的内存使用相关的内容简要整理一下，解释其中一些原理和使用Block需要注意的问题 。\n\n<!--More-->\n\n# 一、关于Block的内存表示\n## 1.1、`clang -rewite-objc 源文件 -o 目标文件（可以为.txt）`\n+ 首先我们来看一段常见源码，通过上述命令查看其中间文件：\n\n```     \n\n\ttypedef void (^ test1) (BOOL success, NSError *error) ;\n\n\tint main(int argc, char * argv[]) {\n\t    @autoreleasepool {\n\t        int base =10;\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t            // int *b  = (int*)malloc(10*sizeof(int));\n\t            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) {\n\t                NSLog(@\"sssss:%d,base:%d\",success,base);\n\t            } ;\n\t            test(1,nil);\n\t           \n\t        }\n\t\n\t//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n\t    }\n\t}\n\n```\n\n+ 通过sublime打开目标文件会发现代码远不止上面那寥寥几行，不难从其中可以找到如下与Block相关的代码。\n\n```\n\n\tstruct __block_impl {\n  \t\tvoid *isa;\n  \t\tint Flags;\n  \t\tint Reserved;\n  \t\tvoid *FuncPtr;\n\t};\n```\n\n`struct __block_impl`就是block的真面目，结构还是相当清晰。`isa`对OC开发人员再熟悉不过，是表示其类型或者说本质的，block有三种类型`NSGlobalBlock`，`NSStackBlock`,`NSMallocBlock`，不同类型的block就是通过这个字段区分。然后就是`FuncPtr`，顾名思义就是指向某一函数的指针。其实block本质上与c语言中的函数指针是一样的。\n\n```   \n\n\tstruct __main_block_impl_0 {\n\t  struct __block_impl impl;\n\t  struct __main_block_desc_0* Desc;\n\t  int base;\n\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _base, int flags=0) : base(_base) {\n\t    impl.isa = &_NSConcreteStackBlock;\n\t    impl.Flags = flags;\n\t    impl.FuncPtr = fp;\n\t    Desc = desc;\n\t  }\n\t};\n\t\n\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) {\n\t  int base = __cself->base; // bound by copy\n\t\n\t                NSLog((NSString *)&__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_0c0cda_mi_0,success,base);\n\t            }\n\n\tstatic struct __main_block_desc_0 {\n\t  size_t reserved;\n\t  size_t Block_size;\n\t} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n```\n\n\tint main(int argc, char * argv[]) {\n\t    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\t        int base =10;\n\t\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t\n\t            void (* test) (BOOL success, NSError *error)= (void (*)(BOOL, NSError *))((id (*)(id, SEL))(void *)objc_msgSend)((id)((void (*)(BOOL, NSError *))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, base)), sel_registerName(\"copy\"));\n\t            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)->FuncPtr)((__block_impl *)test, 1, __null);\n\t\n\t    }\n\t}\n```\n以上这一段代码正是与源码相对应的`struct __main_block_impl_0`是此处block的真正实现，主要分为两部分一个是block的定义一个是block的一些描述。`__main_block_func_0`是具体执行的函数体。接下来就是要`main`函数体中初始化block，然后就大功告成可以便可享用block。\n以上揭示了block的本质。\n# 二、关于Block类型\n# 三、__block变量\n```\n\n\ttypedef void (^ test1) (BOOL success, NSError *error) ;\n\n\tint main(int argc, char * argv[]) {\n\t    @autoreleasepool {\n\t        int base =10;\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t            // int *b  = (int*)malloc(10*sizeof(int));\n\t            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) {\n\t                NSLog(@\"sssss:%d,base:%d\",success,base);\n\t            } ;\n\t            test(1,nil);\n\t           \n\t        }\n\t\n\t//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));\n\t    }\n\t}\n\n```\n\n\n```\n\n\tstruct __Block_byref_base_0 {\n\t  void *__isa;\n\t__Block_byref_base_0 *__forwarding;\n\t int __flags;\n\t int __size;\n\t int base;\n\t};\n\n\tstruct __main_block_impl_0 {\n\t  struct __block_impl impl;\n\t  struct __main_block_desc_0* Desc;\n\t  __Block_byref_base_0 *base; // by ref\n\t  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_base_0 *_base, int flags=0) : base(_base->__forwarding) {\n\t    impl.isa = &_NSConcreteStackBlock;\n\t    impl.Flags = flags;\n\t    impl.FuncPtr = fp;\n\t    Desc = desc;\n\t  }\n\t};\n\tstatic void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) {\n\t  __Block_byref_base_0 *base = __cself->base; // bound by ref\n\t\n\t                NSLog((NSString *)&__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_5fdc20_mi_0,success,(base->__forwarding->base));\n\t            }\n\tstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->base, (void*)src->base, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\t\n\tstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->base, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\t\n\tstatic struct __main_block_desc_0 {\n\t  size_t reserved;\n\t  size_t Block_size;\n\t  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\n\t  void (*dispose)(struct __main_block_impl_0*);\n\t} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\tint main(int argc, char * argv[]) {\n\t    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool; \n\t        __attribute__((__blocks__(byref))) __Block_byref_base_0 base = {(void*)0,(__Block_byref_base_0 *)&base, 0, sizeof(__Block_byref_base_0), 10};\n\t        for(int i=0;i<10;i++){\n\t            int a =10;\n\t\n\t            void (* test) (BOOL success, NSError *error)= ((void (*)(BOOL, NSError *))&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, (__Block_byref_base_0 *)&base, 570425344)) ;\n\t            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)->FuncPtr)((__block_impl *)test, 1, __null);\n\t\n\t        }\n\t\n\t\n\t    }\n\t}\n```\n","slug":"Blocks-in-iOS","published":1,"updated":"2017-03-21T01:24:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wqx0000sjve8u9tcdt5","content":"<blockquote>\n<p>最近由于工作原因，对iOS Block进行一次学习,本篇文章对Block的内存使用相关的内容简要整理一下，解释其中一些原理和使用Block需要注意的问题 。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"一、关于Block的内存表示\"><a href=\"#一、关于Block的内存表示\" class=\"headerlink\" title=\"一、关于Block的内存表示\"></a>一、关于Block的内存表示</h1><h2 id=\"1-1、clang-rewite-objc-源文件-o-目标文件（可以为-txt）\"><a href=\"#1-1、clang-rewite-objc-源文件-o-目标文件（可以为-txt）\" class=\"headerlink\" title=\"1.1、clang -rewite-objc 源文件 -o 目标文件（可以为.txt）\"></a>1.1、<code>clang -rewite-objc 源文件 -o 目标文件（可以为.txt）</code></h2><ul>\n<li>首先我们来看一段常见源码，通过上述命令查看其中间文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef void (^ test1) (BOOL success, NSError *error) ;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int base =10;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\">            // int *b  = (int*)malloc(10*sizeof(int));</div><div class=\"line\">            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) &#123;</div><div class=\"line\">                NSLog(@&quot;sssss:%d,base:%d&quot;,success,base);</div><div class=\"line\">            &#125; ;</div><div class=\"line\">            test(1,nil);</div><div class=\"line\">           </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>通过sublime打开目标文件会发现代码远不止上面那寥寥几行，不难从其中可以找到如下与Block相关的代码。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __block_impl &#123;</div><div class=\"line\"> \t\tvoid *isa;</div><div class=\"line\"> \t\tint Flags;</div><div class=\"line\"> \t\tint Reserved;</div><div class=\"line\"> \t\tvoid *FuncPtr;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>struct __block_impl</code>就是block的真面目，结构还是相当清晰。<code>isa</code>对OC开发人员再熟悉不过，是表示其类型或者说本质的，block有三种类型<code>NSGlobalBlock</code>，<code>NSStackBlock</code>,<code>NSMallocBlock</code>，不同类型的block就是通过这个字段区分。然后就是<code>FuncPtr</code>，顾名思义就是指向某一函数的指针。其实block本质上与c语言中的函数指针是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">  struct __block_impl impl;</div><div class=\"line\">  struct __main_block_desc_0* Desc;</div><div class=\"line\">  int base;</div><div class=\"line\">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _base, int flags=0) : base(_base) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) &#123;</div><div class=\"line\">  int base = __cself-&gt;base; // bound by copy</div><div class=\"line\"></div><div class=\"line\">                NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_0c0cda_mi_0,success,base);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;</div><div class=\"line\">  size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\">        int base =10;</div><div class=\"line\"></div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\"></div><div class=\"line\">            void (* test) (BOOL success, NSError *error)= (void (*)(BOOL, NSError *))((id (*)(id, SEL))(void *)objc_msgSend)((id)((void (*)(BOOL, NSError *))&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, base)), sel_registerName(&quot;copy&quot;));</div><div class=\"line\">            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)-&gt;FuncPtr)((__block_impl *)test, 1, __null);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这一段代码正是与源码相对应的<code>struct __main_block_impl_0</code>是此处block的真正实现，主要分为两部分一个是block的定义一个是block的一些描述。<code>__main_block_func_0</code>是具体执行的函数体。接下来就是要<code>main</code>函数体中初始化block，然后就大功告成可以便可享用block。<br>以上揭示了block的本质。</p>\n<h1 id=\"二、关于Block类型\"><a href=\"#二、关于Block类型\" class=\"headerlink\" title=\"二、关于Block类型\"></a>二、关于Block类型</h1><h1 id=\"三、-block变量\"><a href=\"#三、-block变量\" class=\"headerlink\" title=\"三、__block变量\"></a>三、__block变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef void (^ test1) (BOOL success, NSError *error) ;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int base =10;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\">            // int *b  = (int*)malloc(10*sizeof(int));</div><div class=\"line\">            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) &#123;</div><div class=\"line\">                NSLog(@&quot;sssss:%d,base:%d&quot;,success,base);</div><div class=\"line\">            &#125; ;</div><div class=\"line\">            test(1,nil);</div><div class=\"line\">           </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __Block_byref_base_0 &#123;</div><div class=\"line\">  void *__isa;</div><div class=\"line\">__Block_byref_base_0 *__forwarding;</div><div class=\"line\"> int __flags;</div><div class=\"line\"> int __size;</div><div class=\"line\"> int base;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">  struct __block_impl impl;</div><div class=\"line\">  struct __main_block_desc_0* Desc;</div><div class=\"line\">  __Block_byref_base_0 *base; // by ref</div><div class=\"line\">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_base_0 *_base, int flags=0) : base(_base-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) &#123;</div><div class=\"line\">  __Block_byref_base_0 *base = __cself-&gt;base; // bound by ref</div><div class=\"line\"></div><div class=\"line\">                NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_5fdc20_mi_0,success,(base-&gt;__forwarding-&gt;base));</div><div class=\"line\">            &#125;</div><div class=\"line\">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;base, (void*)src-&gt;base, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;base, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;</div><div class=\"line\">  size_t Block_size;</div><div class=\"line\">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class=\"line\">  void (*dispose)(struct __main_block_impl_0*);</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\">        __attribute__((__blocks__(byref))) __Block_byref_base_0 base = &#123;(void*)0,(__Block_byref_base_0 *)&amp;base, 0, sizeof(__Block_byref_base_0), 10&#125;;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\"></div><div class=\"line\">            void (* test) (BOOL success, NSError *error)= ((void (*)(BOOL, NSError *))&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_base_0 *)&amp;base, 570425344)) ;</div><div class=\"line\">            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)-&gt;FuncPtr)((__block_impl *)test, 1, __null);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>最近由于工作原因，对iOS Block进行一次学习,本篇文章对Block的内存使用相关的内容简要整理一下，解释其中一些原理和使用Block需要注意的问题 。</p>\n</blockquote>","more":"<h1 id=\"一、关于Block的内存表示\"><a href=\"#一、关于Block的内存表示\" class=\"headerlink\" title=\"一、关于Block的内存表示\"></a>一、关于Block的内存表示</h1><h2 id=\"1-1、clang-rewite-objc-源文件-o-目标文件（可以为-txt）\"><a href=\"#1-1、clang-rewite-objc-源文件-o-目标文件（可以为-txt）\" class=\"headerlink\" title=\"1.1、clang -rewite-objc 源文件 -o 目标文件（可以为.txt）\"></a>1.1、<code>clang -rewite-objc 源文件 -o 目标文件（可以为.txt）</code></h2><ul>\n<li>首先我们来看一段常见源码，通过上述命令查看其中间文件：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef void (^ test1) (BOOL success, NSError *error) ;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int base =10;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\">            // int *b  = (int*)malloc(10*sizeof(int));</div><div class=\"line\">            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) &#123;</div><div class=\"line\">                NSLog(@&quot;sssss:%d,base:%d&quot;,success,base);</div><div class=\"line\">            &#125; ;</div><div class=\"line\">            test(1,nil);</div><div class=\"line\">           </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>通过sublime打开目标文件会发现代码远不止上面那寥寥几行，不难从其中可以找到如下与Block相关的代码。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __block_impl &#123;</div><div class=\"line\"> \t\tvoid *isa;</div><div class=\"line\"> \t\tint Flags;</div><div class=\"line\"> \t\tint Reserved;</div><div class=\"line\"> \t\tvoid *FuncPtr;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>struct __block_impl</code>就是block的真面目，结构还是相当清晰。<code>isa</code>对OC开发人员再熟悉不过，是表示其类型或者说本质的，block有三种类型<code>NSGlobalBlock</code>，<code>NSStackBlock</code>,<code>NSMallocBlock</code>，不同类型的block就是通过这个字段区分。然后就是<code>FuncPtr</code>，顾名思义就是指向某一函数的指针。其实block本质上与c语言中的函数指针是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">  struct __block_impl impl;</div><div class=\"line\">  struct __main_block_desc_0* Desc;</div><div class=\"line\">  int base;</div><div class=\"line\">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _base, int flags=0) : base(_base) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) &#123;</div><div class=\"line\">  int base = __cself-&gt;base; // bound by copy</div><div class=\"line\"></div><div class=\"line\">                NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_0c0cda_mi_0,success,base);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;</div><div class=\"line\">  size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\">        int base =10;</div><div class=\"line\"></div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\"></div><div class=\"line\">            void (* test) (BOOL success, NSError *error)= (void (*)(BOOL, NSError *))((id (*)(id, SEL))(void *)objc_msgSend)((id)((void (*)(BOOL, NSError *))&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, base)), sel_registerName(&quot;copy&quot;));</div><div class=\"line\">            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)-&gt;FuncPtr)((__block_impl *)test, 1, __null);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上这一段代码正是与源码相对应的<code>struct __main_block_impl_0</code>是此处block的真正实现，主要分为两部分一个是block的定义一个是block的一些描述。<code>__main_block_func_0</code>是具体执行的函数体。接下来就是要<code>main</code>函数体中初始化block，然后就大功告成可以便可享用block。<br>以上揭示了block的本质。</p>\n<h1 id=\"二、关于Block类型\"><a href=\"#二、关于Block类型\" class=\"headerlink\" title=\"二、关于Block类型\"></a>二、关于Block类型</h1><h1 id=\"三、-block变量\"><a href=\"#三、-block变量\" class=\"headerlink\" title=\"三、__block变量\"></a>三、__block变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">typedef void (^ test1) (BOOL success, NSError *error) ;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    @autoreleasepool &#123;</div><div class=\"line\">        int base =10;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\">            // int *b  = (int*)malloc(10*sizeof(int));</div><div class=\"line\">            void (^ test) (BOOL success, NSError *error)= ^(BOOL success, NSError *error) &#123;</div><div class=\"line\">                NSLog(@&quot;sssss:%d,base:%d&quot;,success,base);</div><div class=\"line\">            &#125; ;</div><div class=\"line\">            test(1,nil);</div><div class=\"line\">           </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">//        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">struct __Block_byref_base_0 &#123;</div><div class=\"line\">  void *__isa;</div><div class=\"line\">__Block_byref_base_0 *__forwarding;</div><div class=\"line\"> int __flags;</div><div class=\"line\"> int __size;</div><div class=\"line\"> int base;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">  struct __block_impl impl;</div><div class=\"line\">  struct __main_block_desc_0* Desc;</div><div class=\"line\">  __Block_byref_base_0 *base; // by ref</div><div class=\"line\">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_base_0 *_base, int flags=0) : base(_base-&gt;__forwarding) &#123;</div><div class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">    impl.Flags = flags;</div><div class=\"line\">    impl.FuncPtr = fp;</div><div class=\"line\">    Desc = desc;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself, BOOL success, NSError *error) &#123;</div><div class=\"line\">  __Block_byref_base_0 *base = __cself-&gt;base; // bound by ref</div><div class=\"line\"></div><div class=\"line\">                NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_rl_k02s7ny56tj7m7cg3kdrfpbh0000gn_T_main_5fdc20_mi_0,success,(base-&gt;__forwarding-&gt;base));</div><div class=\"line\">            &#125;</div><div class=\"line\">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;base, (void*)src-&gt;base, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;base, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">  size_t reserved;</div><div class=\"line\">  size_t Block_size;</div><div class=\"line\">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class=\"line\">  void (*dispose)(struct __main_block_impl_0*);</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\">    /* @autoreleasepool */ &#123; __AtAutoreleasePool __autoreleasepool; </div><div class=\"line\">        __attribute__((__blocks__(byref))) __Block_byref_base_0 base = &#123;(void*)0,(__Block_byref_base_0 *)&amp;base, 0, sizeof(__Block_byref_base_0), 10&#125;;</div><div class=\"line\">        for(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">            int a =10;</div><div class=\"line\"></div><div class=\"line\">            void (* test) (BOOL success, NSError *error)= ((void (*)(BOOL, NSError *))&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_base_0 *)&amp;base, 570425344)) ;</div><div class=\"line\">            ((void (*)(__block_impl *, BOOL, NSError *))((__block_impl *)test)-&gt;FuncPtr)((__block_impl *)test, 1, __null);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"C/C++ Dev","date":"2017-03-19T09:27:29.000Z","_content":"\n> C/C++ 相关知识储备\n\n<!-- More-->\n\n# 一、基础知识\n## 1、关于类的静态成员赋值问题\n静态成员在实现文件中直接初始化不能在头文件里进行就地初始化，如：\n**错误**\n\n\n\n\tClass A   \n\t{     \n\t   static n = 10;\n\t}      \n  \n\n\n\n**正确：**在实现文件中   \n\n\n\n\tint A：：n=10；//不需要static 关键字\n \n \n**原因**\n因为class的声明都通常在头文件中，如果允许这样做其实就相当于在头文件里定义了一个非const的变量。头文件因为会被包含到多个文件中去，而非const变量的链接属性是内部链接也就是不会在编译时在导出符号表中，因此在某个文件中对其修改不会影响到别的文件，而这不是我们想要的结果。另外，const变量的可以的，因为const变量是只读的而且链接属性是外部链接也就是在编译时会导出符号表，就不存在上述现象。**c/c++在编译时会生成三个符号表：未解决符号表（待填入的变量如extern），导出符号表（用于链接到别的模块的变量与函数），重定位符号表（用于在链接时组成可运行程序内的全局地址）**       \n\n## 2、关于内联函数在头文件里定义的原因\n因为编译时每一个单元之间是不通的也就是相互独立，如果将内联函数定义在.cpp文件中就那么就只能这一个cpp文件可以用到这个内联函数了，其它的单元会因为找不到这个定义而无法进行函数展开。（与.h /.cpp不一样的原因是内联函数其实是在编译时进行一个展开，而一般的函数并不进行展开）\n\n## 3、关于枚举变量\n\n\n\tenum weekly {sun,sat,frid};weekly test;\n\ttest = sun;/*test 只能赋予 {sun,sat,frid}中枚举出的值，或者进行强制类型转换的赋值如：test = (weekly)0，意为将枚举中的第0个元素赋予test*/\n\n\n## 4、关于float变量\n\n1，规范IEEE754有关于0的描述。  \n\n\n2，由于float是不确定的描述，所以一般不要对其进行比较！\n\n## 5、关于构造函数（派生类与父类的调用关系）  \n\n**原则就是父类的构造函数一定要调用不管是显示还是隐式**\n\n1、如果子类没有定义构造函数，则调用父类无参构造函数（默认构造函数）；\n\n2、如果子类定义了有参构造函数，创建子类对象时候，先执行父类无参构造函数，然后执行子类构造 函数；\n\n3、如果子类构造函数没有显示调用父类构造函数，则会调用父类默认无参构造函数；\n\n4、如果子类构造函数没有显示调用父类构造函数且父类提供了无参构造函数，则会调用父类的无参默认构造函数\n\n5、如果子类构造函数没有显示调用 父类构造函数且父类只定义了有参构造函数，则会出错  \n\n## 6、关于C/C++符号表问题\n1、C++支持重载C不支持重载的原因：C在编译时生成符号表时只根据<font color = red>**函数名**</font>生成，而C++生成的符号表是由<font color = red>**函数名+参数**</font>生成的   \n\n\n2、C++不能以返回值不同作为重载区分的原因：同上，由于C++生成的符号表是由<font color = red>**函数名+参数**</font>生成的，并不包含返回值    \n\n## 7、关于C++继承访问控制问题\n\n|  父类访问控制| public | protected | private |\n| -- | -- | -- | --|\n|public 继承| public |  protected | 不可用 |   \n|protected 继承| protected |  protected | 不可用 |  \n|private 继承|  private  |   private | 不可用 |   \n\n**protected**：不可以被用户访问，只可以被派生类访问  \n\n**private**：都不可以访问，除了自己外。    \n\n# 8、[重写，重载，覆盖的关系]( http://blog.csdn.net/ericbaner/article/details/3857268)   \n\n+ 重写= 覆盖，是子类重写（覆盖）父类的方法，也就是同名同参数的方法   \n\n+ 重载，是一个作用域内有两个或者多个同名的方法（参数不一样），重载不能根据返回值不同进行重载       \n\n## 9.静态变量也全局变量的区别\n+ 从内存分配来说：     \n  + 静态变量与全局变量都是在程序静态区域      \n+ 从链接属性来说：     \n  + 静态全局变量只能在本文件访问，全局变量能在多文件间访问     \n\n静态全局变量与全局变量的区别就在于链接属性\n\n## 二、关于编码问题\n\n1、**Ascii**：c语言中的ascii表，一个字节\n\n2、**unicode**：为了拓展表示更多的语言，例如中文就无法用ascii码表示，二个字节\n\n3、**utf-8**：用unicode可以解决编码的问题，但是全部采用二个字节一般情况下是比较浪费的，所以就出现了可变长的unicode编码方式。utf-8根据不同的字符编码成1-6个字节的可变长，常用 的英文字母就编码成一个字节与ascii码一至，中方字符则编码成三个字节。这样utf-8其实是包括了ascii的。\n\n## 三、关于`static`关键字问题\n\n1、**静态变量**属于静态存储方式，其存储空间为内存中的静态数据区（在静态存储区内分配存储单元）；\n\n2、**静态变量**可以在任何可以申请的地方申请，一旦申请成功后，它将不再接受其他的同样申请。 函数体内如果在定义静态变量的同时进行了初始化，则以后程序不再进行初始化操作（出现在函数内部的基本类型的的静态变量初始化语句只有在第一次调用才执行）。而对自动变量赋初值是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句 例如：\n\n\n```   \n\n\tclass test\n\t\n\t{\n\t\n\tprivate :\n\t int a;\n\tpublic :\n\t    test( int _a): a (_a)\n\t\n\t    {\n\t\n\t        NSLog ( @\"test:%d\\n\" , a );\n\t\n\t\n\t    }\n\t\n\t};\n\t\n\tvoid testFunction( int a)\n\t\n\t{\n\t  static test te(a);\n\t    NSLog ( @\"\\n%p\\n\" ,&te);\n\t    static int bb= 10 ;\n\t    NSLog ( @\"\\nbb value:%d\\n\" ,bb);\n\t\n\t    bb ++;\n\t  NSLog ( @\"\\nbb value:%d\\n\" ,bb);\n\t\n\t}\n\t\n\tvoid TEST()\n\t\n\t{\n\t\n\t     testFunction ( 10 );\n\t\n\t    testFunction ( 11 );\n\t}\n\n```\n\nbb的结果：\n\n```\n\n\t10\n\t\n\t11\n\t\n\t11\n\t\n\t12\n\n```\n\n同理，test类的构造函数也只会调用一次 \n\n>  它将不再接受其他的同样申请       \n\n\n\n\n## 四、关于递归函数问题\n\n1、我们都知道递归层次过多会导致栈溢出，那么关于递归优化我们可以使用循环`while`来进行改写，其实我们也可以使用[尾递归]( https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8)的方式进行改写。   \n\n2、尾调用，先来看一段代码：\n\n```\n\n\tfunc ()\n\t\n\t{\n\t\n\t.....\n\t\n\treturn g()\n\t\n\t}\n\n```\n\n上述例子中，func调用了g函数，在这种情况下当g函数运行完时无须返回到func函数中去，因此，栈中就不需要保存func的信息。**CAUTION**: `return g()`不能有多余的操作。尾递归其实就是一种尾调用。*但是现在一些编译器没有真的实现尾递归*。    \n\n## 五、继承与组合   \n\n+ 目中减少使用继承，另外也不宜使用深继承。因为继承使用对象之间形成强耦合关系。   \n\n## 六、命令式编程，函数式编程及响应式编程\n\n+ 在命令式编程环境中, a= b+c  表示将表达式b+c的结果赋给a ，而之后b改变 或 c 的值不会影响a 。但在响应式编程中，a 的值会随着 b 或 c 的更新而更新。   \n\n+ 一般的编程语言是命令式编程（指令式编程），响应式可以联想到KVO,Notification   \n+ 函数式编程是以函数为主[参考](http://coolshell.cn/articles/10822.html)\n\n## 七、void *test = &test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void *是可以指向任何指针，so done\n\n\n\n\n","source":"_posts/C-C-Dev.md","raw":"---\ntitle: C/C++ Dev\ndate: 2017-03-19 17:27:29\ncategories: C/C++\ntags: [C/C++,Dev]\n---\n\n> C/C++ 相关知识储备\n\n<!-- More-->\n\n# 一、基础知识\n## 1、关于类的静态成员赋值问题\n静态成员在实现文件中直接初始化不能在头文件里进行就地初始化，如：\n**错误**\n\n\n\n\tClass A   \n\t{     \n\t   static n = 10;\n\t}      \n  \n\n\n\n**正确：**在实现文件中   \n\n\n\n\tint A：：n=10；//不需要static 关键字\n \n \n**原因**\n因为class的声明都通常在头文件中，如果允许这样做其实就相当于在头文件里定义了一个非const的变量。头文件因为会被包含到多个文件中去，而非const变量的链接属性是内部链接也就是不会在编译时在导出符号表中，因此在某个文件中对其修改不会影响到别的文件，而这不是我们想要的结果。另外，const变量的可以的，因为const变量是只读的而且链接属性是外部链接也就是在编译时会导出符号表，就不存在上述现象。**c/c++在编译时会生成三个符号表：未解决符号表（待填入的变量如extern），导出符号表（用于链接到别的模块的变量与函数），重定位符号表（用于在链接时组成可运行程序内的全局地址）**       \n\n## 2、关于内联函数在头文件里定义的原因\n因为编译时每一个单元之间是不通的也就是相互独立，如果将内联函数定义在.cpp文件中就那么就只能这一个cpp文件可以用到这个内联函数了，其它的单元会因为找不到这个定义而无法进行函数展开。（与.h /.cpp不一样的原因是内联函数其实是在编译时进行一个展开，而一般的函数并不进行展开）\n\n## 3、关于枚举变量\n\n\n\tenum weekly {sun,sat,frid};weekly test;\n\ttest = sun;/*test 只能赋予 {sun,sat,frid}中枚举出的值，或者进行强制类型转换的赋值如：test = (weekly)0，意为将枚举中的第0个元素赋予test*/\n\n\n## 4、关于float变量\n\n1，规范IEEE754有关于0的描述。  \n\n\n2，由于float是不确定的描述，所以一般不要对其进行比较！\n\n## 5、关于构造函数（派生类与父类的调用关系）  \n\n**原则就是父类的构造函数一定要调用不管是显示还是隐式**\n\n1、如果子类没有定义构造函数，则调用父类无参构造函数（默认构造函数）；\n\n2、如果子类定义了有参构造函数，创建子类对象时候，先执行父类无参构造函数，然后执行子类构造 函数；\n\n3、如果子类构造函数没有显示调用父类构造函数，则会调用父类默认无参构造函数；\n\n4、如果子类构造函数没有显示调用父类构造函数且父类提供了无参构造函数，则会调用父类的无参默认构造函数\n\n5、如果子类构造函数没有显示调用 父类构造函数且父类只定义了有参构造函数，则会出错  \n\n## 6、关于C/C++符号表问题\n1、C++支持重载C不支持重载的原因：C在编译时生成符号表时只根据<font color = red>**函数名**</font>生成，而C++生成的符号表是由<font color = red>**函数名+参数**</font>生成的   \n\n\n2、C++不能以返回值不同作为重载区分的原因：同上，由于C++生成的符号表是由<font color = red>**函数名+参数**</font>生成的，并不包含返回值    \n\n## 7、关于C++继承访问控制问题\n\n|  父类访问控制| public | protected | private |\n| -- | -- | -- | --|\n|public 继承| public |  protected | 不可用 |   \n|protected 继承| protected |  protected | 不可用 |  \n|private 继承|  private  |   private | 不可用 |   \n\n**protected**：不可以被用户访问，只可以被派生类访问  \n\n**private**：都不可以访问，除了自己外。    \n\n# 8、[重写，重载，覆盖的关系]( http://blog.csdn.net/ericbaner/article/details/3857268)   \n\n+ 重写= 覆盖，是子类重写（覆盖）父类的方法，也就是同名同参数的方法   \n\n+ 重载，是一个作用域内有两个或者多个同名的方法（参数不一样），重载不能根据返回值不同进行重载       \n\n## 9.静态变量也全局变量的区别\n+ 从内存分配来说：     \n  + 静态变量与全局变量都是在程序静态区域      \n+ 从链接属性来说：     \n  + 静态全局变量只能在本文件访问，全局变量能在多文件间访问     \n\n静态全局变量与全局变量的区别就在于链接属性\n\n## 二、关于编码问题\n\n1、**Ascii**：c语言中的ascii表，一个字节\n\n2、**unicode**：为了拓展表示更多的语言，例如中文就无法用ascii码表示，二个字节\n\n3、**utf-8**：用unicode可以解决编码的问题，但是全部采用二个字节一般情况下是比较浪费的，所以就出现了可变长的unicode编码方式。utf-8根据不同的字符编码成1-6个字节的可变长，常用 的英文字母就编码成一个字节与ascii码一至，中方字符则编码成三个字节。这样utf-8其实是包括了ascii的。\n\n## 三、关于`static`关键字问题\n\n1、**静态变量**属于静态存储方式，其存储空间为内存中的静态数据区（在静态存储区内分配存储单元）；\n\n2、**静态变量**可以在任何可以申请的地方申请，一旦申请成功后，它将不再接受其他的同样申请。 函数体内如果在定义静态变量的同时进行了初始化，则以后程序不再进行初始化操作（出现在函数内部的基本类型的的静态变量初始化语句只有在第一次调用才执行）。而对自动变量赋初值是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句 例如：\n\n\n```   \n\n\tclass test\n\t\n\t{\n\t\n\tprivate :\n\t int a;\n\tpublic :\n\t    test( int _a): a (_a)\n\t\n\t    {\n\t\n\t        NSLog ( @\"test:%d\\n\" , a );\n\t\n\t\n\t    }\n\t\n\t};\n\t\n\tvoid testFunction( int a)\n\t\n\t{\n\t  static test te(a);\n\t    NSLog ( @\"\\n%p\\n\" ,&te);\n\t    static int bb= 10 ;\n\t    NSLog ( @\"\\nbb value:%d\\n\" ,bb);\n\t\n\t    bb ++;\n\t  NSLog ( @\"\\nbb value:%d\\n\" ,bb);\n\t\n\t}\n\t\n\tvoid TEST()\n\t\n\t{\n\t\n\t     testFunction ( 10 );\n\t\n\t    testFunction ( 11 );\n\t}\n\n```\n\nbb的结果：\n\n```\n\n\t10\n\t\n\t11\n\t\n\t11\n\t\n\t12\n\n```\n\n同理，test类的构造函数也只会调用一次 \n\n>  它将不再接受其他的同样申请       \n\n\n\n\n## 四、关于递归函数问题\n\n1、我们都知道递归层次过多会导致栈溢出，那么关于递归优化我们可以使用循环`while`来进行改写，其实我们也可以使用[尾递归]( https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8)的方式进行改写。   \n\n2、尾调用，先来看一段代码：\n\n```\n\n\tfunc ()\n\t\n\t{\n\t\n\t.....\n\t\n\treturn g()\n\t\n\t}\n\n```\n\n上述例子中，func调用了g函数，在这种情况下当g函数运行完时无须返回到func函数中去，因此，栈中就不需要保存func的信息。**CAUTION**: `return g()`不能有多余的操作。尾递归其实就是一种尾调用。*但是现在一些编译器没有真的实现尾递归*。    \n\n## 五、继承与组合   \n\n+ 目中减少使用继承，另外也不宜使用深继承。因为继承使用对象之间形成强耦合关系。   \n\n## 六、命令式编程，函数式编程及响应式编程\n\n+ 在命令式编程环境中, a= b+c  表示将表达式b+c的结果赋给a ，而之后b改变 或 c 的值不会影响a 。但在响应式编程中，a 的值会随着 b 或 c 的更新而更新。   \n\n+ 一般的编程语言是命令式编程（指令式编程），响应式可以联想到KVO,Notification   \n+ 函数式编程是以函数为主[参考](http://coolshell.cn/articles/10822.html)\n\n## 七、void *test = &test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void *是可以指向任何指针，so done\n\n\n\n\n","slug":"C-C-Dev","published":1,"updated":"2017-03-20T01:25:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wr20002sjvedb5hwflf","content":"<blockquote>\n<p>C/C++ 相关知识储备</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><h2 id=\"1、关于类的静态成员赋值问题\"><a href=\"#1、关于类的静态成员赋值问题\" class=\"headerlink\" title=\"1、关于类的静态成员赋值问题\"></a>1、关于类的静态成员赋值问题</h2><p>静态成员在实现文件中直接初始化不能在头文件里进行就地初始化，如：<br><strong>错误</strong></p>\n<pre><code>Class A   \n{     \n   static n = 10;\n}      \n</code></pre><p><strong>正确：</strong>在实现文件中   </p>\n<pre><code>int A：：n=10；//不需要static 关键字\n</code></pre><p><strong>原因</strong><br>因为class的声明都通常在头文件中，如果允许这样做其实就相当于在头文件里定义了一个非const的变量。头文件因为会被包含到多个文件中去，而非const变量的链接属性是内部链接也就是不会在编译时在导出符号表中，因此在某个文件中对其修改不会影响到别的文件，而这不是我们想要的结果。另外，const变量的可以的，因为const变量是只读的而且链接属性是外部链接也就是在编译时会导出符号表，就不存在上述现象。<strong>c/c++在编译时会生成三个符号表：未解决符号表（待填入的变量如extern），导出符号表（用于链接到别的模块的变量与函数），重定位符号表（用于在链接时组成可运行程序内的全局地址）</strong>       </p>\n<h2 id=\"2、关于内联函数在头文件里定义的原因\"><a href=\"#2、关于内联函数在头文件里定义的原因\" class=\"headerlink\" title=\"2、关于内联函数在头文件里定义的原因\"></a>2、关于内联函数在头文件里定义的原因</h2><p>因为编译时每一个单元之间是不通的也就是相互独立，如果将内联函数定义在.cpp文件中就那么就只能这一个cpp文件可以用到这个内联函数了，其它的单元会因为找不到这个定义而无法进行函数展开。（与.h /.cpp不一样的原因是内联函数其实是在编译时进行一个展开，而一般的函数并不进行展开）</p>\n<h2 id=\"3、关于枚举变量\"><a href=\"#3、关于枚举变量\" class=\"headerlink\" title=\"3、关于枚举变量\"></a>3、关于枚举变量</h2><pre><code>enum weekly {sun,sat,frid};weekly test;\ntest = sun;/*test 只能赋予 {sun,sat,frid}中枚举出的值，或者进行强制类型转换的赋值如：test = (weekly)0，意为将枚举中的第0个元素赋予test*/\n</code></pre><h2 id=\"4、关于float变量\"><a href=\"#4、关于float变量\" class=\"headerlink\" title=\"4、关于float变量\"></a>4、关于float变量</h2><p>1，规范IEEE754有关于0的描述。  </p>\n<p>2，由于float是不确定的描述，所以一般不要对其进行比较！</p>\n<h2 id=\"5、关于构造函数（派生类与父类的调用关系）\"><a href=\"#5、关于构造函数（派生类与父类的调用关系）\" class=\"headerlink\" title=\"5、关于构造函数（派生类与父类的调用关系）\"></a>5、关于构造函数（派生类与父类的调用关系）</h2><p><strong>原则就是父类的构造函数一定要调用不管是显示还是隐式</strong></p>\n<p>1、如果子类没有定义构造函数，则调用父类无参构造函数（默认构造函数）；</p>\n<p>2、如果子类定义了有参构造函数，创建子类对象时候，先执行父类无参构造函数，然后执行子类构造 函数；</p>\n<p>3、如果子类构造函数没有显示调用父类构造函数，则会调用父类默认无参构造函数；</p>\n<p>4、如果子类构造函数没有显示调用父类构造函数且父类提供了无参构造函数，则会调用父类的无参默认构造函数</p>\n<p>5、如果子类构造函数没有显示调用 父类构造函数且父类只定义了有参构造函数，则会出错  </p>\n<h2 id=\"6、关于C-C-符号表问题\"><a href=\"#6、关于C-C-符号表问题\" class=\"headerlink\" title=\"6、关于C/C++符号表问题\"></a>6、关于C/C++符号表问题</h2><p>1、C++支持重载C不支持重载的原因：C在编译时生成符号表时只根据<font color=\"red\"><strong>函数名</strong></font>生成，而C++生成的符号表是由<font color=\"red\"><strong>函数名+参数</strong></font>生成的   </p>\n<p>2、C++不能以返回值不同作为重载区分的原因：同上，由于C++生成的符号表是由<font color=\"red\"><strong>函数名+参数</strong></font>生成的，并不包含返回值    </p>\n<h2 id=\"7、关于C-继承访问控制问题\"><a href=\"#7、关于C-继承访问控制问题\" class=\"headerlink\" title=\"7、关于C++继承访问控制问题\"></a>7、关于C++继承访问控制问题</h2><table>\n<thead>\n<tr>\n<th>父类访问控制</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public 继承</td>\n<td>public</td>\n<td>protected</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>protected 继承</td>\n<td>protected</td>\n<td>protected</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>private 继承</td>\n<td>private</td>\n<td>private</td>\n<td>不可用</td>\n</tr>\n</tbody>\n</table>\n<p><strong>protected</strong>：不可以被用户访问，只可以被派生类访问  </p>\n<p><strong>private</strong>：都不可以访问，除了自己外。    </p>\n<h1 id=\"8、重写，重载，覆盖的关系\"><a href=\"#8、重写，重载，覆盖的关系\" class=\"headerlink\" title=\"8、重写，重载，覆盖的关系\"></a>8、<a href=\"http://blog.csdn.net/ericbaner/article/details/3857268\" target=\"_blank\" rel=\"external\">重写，重载，覆盖的关系</a></h1><ul>\n<li><p>重写= 覆盖，是子类重写（覆盖）父类的方法，也就是同名同参数的方法   </p>\n</li>\n<li><p>重载，是一个作用域内有两个或者多个同名的方法（参数不一样），重载不能根据返回值不同进行重载       </p>\n</li>\n</ul>\n<h2 id=\"9-静态变量也全局变量的区别\"><a href=\"#9-静态变量也全局变量的区别\" class=\"headerlink\" title=\"9.静态变量也全局变量的区别\"></a>9.静态变量也全局变量的区别</h2><ul>\n<li>从内存分配来说：     <ul>\n<li>静态变量与全局变量都是在程序静态区域      </li>\n</ul>\n</li>\n<li>从链接属性来说：     <ul>\n<li>静态全局变量只能在本文件访问，全局变量能在多文件间访问     </li>\n</ul>\n</li>\n</ul>\n<p>静态全局变量与全局变量的区别就在于链接属性</p>\n<h2 id=\"二、关于编码问题\"><a href=\"#二、关于编码问题\" class=\"headerlink\" title=\"二、关于编码问题\"></a>二、关于编码问题</h2><p>1、<strong>Ascii</strong>：c语言中的ascii表，一个字节</p>\n<p>2、<strong>unicode</strong>：为了拓展表示更多的语言，例如中文就无法用ascii码表示，二个字节</p>\n<p>3、<strong>utf-8</strong>：用unicode可以解决编码的问题，但是全部采用二个字节一般情况下是比较浪费的，所以就出现了可变长的unicode编码方式。utf-8根据不同的字符编码成1-6个字节的可变长，常用 的英文字母就编码成一个字节与ascii码一至，中方字符则编码成三个字节。这样utf-8其实是包括了ascii的。</p>\n<h2 id=\"三、关于static关键字问题\"><a href=\"#三、关于static关键字问题\" class=\"headerlink\" title=\"三、关于static关键字问题\"></a>三、关于<code>static</code>关键字问题</h2><p>1、<strong>静态变量</strong>属于静态存储方式，其存储空间为内存中的静态数据区（在静态存储区内分配存储单元）；</p>\n<p>2、<strong>静态变量</strong>可以在任何可以申请的地方申请，一旦申请成功后，它将不再接受其他的同样申请。 函数体内如果在定义静态变量的同时进行了初始化，则以后程序不再进行初始化操作（出现在函数内部的基本类型的的静态变量初始化语句只有在第一次调用才执行）。而对自动变量赋初值是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">class test</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">private :</div><div class=\"line\"> int a;</div><div class=\"line\">public :</div><div class=\"line\">    test( int _a): a (_a)</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        NSLog ( @&quot;test:%d\\n&quot; , a );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void testFunction( int a)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  static test te(a);</div><div class=\"line\">    NSLog ( @&quot;\\n%p\\n&quot; ,&amp;te);</div><div class=\"line\">    static int bb= 10 ;</div><div class=\"line\">    NSLog ( @&quot;\\nbb value:%d\\n&quot; ,bb);</div><div class=\"line\"></div><div class=\"line\">    bb ++;</div><div class=\"line\">  NSLog ( @&quot;\\nbb value:%d\\n&quot; ,bb);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TEST()</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">     testFunction ( 10 );</div><div class=\"line\"></div><div class=\"line\">    testFunction ( 11 );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>bb的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">10</div><div class=\"line\"></div><div class=\"line\">11</div><div class=\"line\"></div><div class=\"line\">11</div><div class=\"line\"></div><div class=\"line\">12</div></pre></td></tr></table></figure>\n<p>同理，test类的构造函数也只会调用一次 </p>\n<blockquote>\n<p> 它将不再接受其他的同样申请       </p>\n</blockquote>\n<h2 id=\"四、关于递归函数问题\"><a href=\"#四、关于递归函数问题\" class=\"headerlink\" title=\"四、关于递归函数问题\"></a>四、关于递归函数问题</h2><p>1、我们都知道递归层次过多会导致栈溢出，那么关于递归优化我们可以使用循环<code>while</code>来进行改写，其实我们也可以使用<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\" target=\"_blank\" rel=\"external\">尾递归</a>的方式进行改写。   </p>\n<p>2、尾调用，先来看一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">func ()</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">.....</div><div class=\"line\"></div><div class=\"line\">return g()</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述例子中，func调用了g函数，在这种情况下当g函数运行完时无须返回到func函数中去，因此，栈中就不需要保存func的信息。<strong>CAUTION</strong>: <code>return g()</code>不能有多余的操作。尾递归其实就是一种尾调用。<em>但是现在一些编译器没有真的实现尾递归</em>。    </p>\n<h2 id=\"五、继承与组合\"><a href=\"#五、继承与组合\" class=\"headerlink\" title=\"五、继承与组合\"></a>五、继承与组合</h2><ul>\n<li>目中减少使用继承，另外也不宜使用深继承。因为继承使用对象之间形成强耦合关系。   </li>\n</ul>\n<h2 id=\"六、命令式编程，函数式编程及响应式编程\"><a href=\"#六、命令式编程，函数式编程及响应式编程\" class=\"headerlink\" title=\"六、命令式编程，函数式编程及响应式编程\"></a>六、命令式编程，函数式编程及响应式编程</h2><ul>\n<li><p>在命令式编程环境中, a= b+c  表示将表达式b+c的结果赋给a ，而之后b改变 或 c 的值不会影响a 。但在响应式编程中，a 的值会随着 b 或 c 的更新而更新。   </p>\n</li>\n<li><p>一般的编程语言是命令式编程（指令式编程），响应式可以联想到KVO,Notification   </p>\n</li>\n<li>函数式编程是以函数为主<a href=\"http://coolshell.cn/articles/10822.html\" target=\"_blank\" rel=\"external\">参考</a></li>\n</ul>\n<h2 id=\"七、void-test-amp-test-理解：“-”是左结合性运算符，所以就可以理解了，然后就是void-是可以指向任何指针，so-done\"><a href=\"#七、void-test-amp-test-理解：“-”是左结合性运算符，所以就可以理解了，然后就是void-是可以指向任何指针，so-done\" class=\"headerlink\" title=\"七、void test = &amp;test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void 是可以指向任何指针，so done\"></a>七、void <em>test = &amp;test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void </em>是可以指向任何指针，so done</h2>","excerpt":"<blockquote>\n<p>C/C++ 相关知识储备</p>\n</blockquote>","more":"<h1 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h1><h2 id=\"1、关于类的静态成员赋值问题\"><a href=\"#1、关于类的静态成员赋值问题\" class=\"headerlink\" title=\"1、关于类的静态成员赋值问题\"></a>1、关于类的静态成员赋值问题</h2><p>静态成员在实现文件中直接初始化不能在头文件里进行就地初始化，如：<br><strong>错误</strong></p>\n<pre><code>Class A   \n{     \n   static n = 10;\n}      \n</code></pre><p><strong>正确：</strong>在实现文件中   </p>\n<pre><code>int A：：n=10；//不需要static 关键字\n</code></pre><p><strong>原因</strong><br>因为class的声明都通常在头文件中，如果允许这样做其实就相当于在头文件里定义了一个非const的变量。头文件因为会被包含到多个文件中去，而非const变量的链接属性是内部链接也就是不会在编译时在导出符号表中，因此在某个文件中对其修改不会影响到别的文件，而这不是我们想要的结果。另外，const变量的可以的，因为const变量是只读的而且链接属性是外部链接也就是在编译时会导出符号表，就不存在上述现象。<strong>c/c++在编译时会生成三个符号表：未解决符号表（待填入的变量如extern），导出符号表（用于链接到别的模块的变量与函数），重定位符号表（用于在链接时组成可运行程序内的全局地址）</strong>       </p>\n<h2 id=\"2、关于内联函数在头文件里定义的原因\"><a href=\"#2、关于内联函数在头文件里定义的原因\" class=\"headerlink\" title=\"2、关于内联函数在头文件里定义的原因\"></a>2、关于内联函数在头文件里定义的原因</h2><p>因为编译时每一个单元之间是不通的也就是相互独立，如果将内联函数定义在.cpp文件中就那么就只能这一个cpp文件可以用到这个内联函数了，其它的单元会因为找不到这个定义而无法进行函数展开。（与.h /.cpp不一样的原因是内联函数其实是在编译时进行一个展开，而一般的函数并不进行展开）</p>\n<h2 id=\"3、关于枚举变量\"><a href=\"#3、关于枚举变量\" class=\"headerlink\" title=\"3、关于枚举变量\"></a>3、关于枚举变量</h2><pre><code>enum weekly {sun,sat,frid};weekly test;\ntest = sun;/*test 只能赋予 {sun,sat,frid}中枚举出的值，或者进行强制类型转换的赋值如：test = (weekly)0，意为将枚举中的第0个元素赋予test*/\n</code></pre><h2 id=\"4、关于float变量\"><a href=\"#4、关于float变量\" class=\"headerlink\" title=\"4、关于float变量\"></a>4、关于float变量</h2><p>1，规范IEEE754有关于0的描述。  </p>\n<p>2，由于float是不确定的描述，所以一般不要对其进行比较！</p>\n<h2 id=\"5、关于构造函数（派生类与父类的调用关系）\"><a href=\"#5、关于构造函数（派生类与父类的调用关系）\" class=\"headerlink\" title=\"5、关于构造函数（派生类与父类的调用关系）\"></a>5、关于构造函数（派生类与父类的调用关系）</h2><p><strong>原则就是父类的构造函数一定要调用不管是显示还是隐式</strong></p>\n<p>1、如果子类没有定义构造函数，则调用父类无参构造函数（默认构造函数）；</p>\n<p>2、如果子类定义了有参构造函数，创建子类对象时候，先执行父类无参构造函数，然后执行子类构造 函数；</p>\n<p>3、如果子类构造函数没有显示调用父类构造函数，则会调用父类默认无参构造函数；</p>\n<p>4、如果子类构造函数没有显示调用父类构造函数且父类提供了无参构造函数，则会调用父类的无参默认构造函数</p>\n<p>5、如果子类构造函数没有显示调用 父类构造函数且父类只定义了有参构造函数，则会出错  </p>\n<h2 id=\"6、关于C-C-符号表问题\"><a href=\"#6、关于C-C-符号表问题\" class=\"headerlink\" title=\"6、关于C/C++符号表问题\"></a>6、关于C/C++符号表问题</h2><p>1、C++支持重载C不支持重载的原因：C在编译时生成符号表时只根据<font color = red><strong>函数名</strong></font>生成，而C++生成的符号表是由<font color = red><strong>函数名+参数</strong></font>生成的   </p>\n<p>2、C++不能以返回值不同作为重载区分的原因：同上，由于C++生成的符号表是由<font color = red><strong>函数名+参数</strong></font>生成的，并不包含返回值    </p>\n<h2 id=\"7、关于C-继承访问控制问题\"><a href=\"#7、关于C-继承访问控制问题\" class=\"headerlink\" title=\"7、关于C++继承访问控制问题\"></a>7、关于C++继承访问控制问题</h2><table>\n<thead>\n<tr>\n<th>父类访问控制</th>\n<th>public</th>\n<th>protected</th>\n<th>private</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public 继承</td>\n<td>public</td>\n<td>protected</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>protected 继承</td>\n<td>protected</td>\n<td>protected</td>\n<td>不可用</td>\n</tr>\n<tr>\n<td>private 继承</td>\n<td>private</td>\n<td>private</td>\n<td>不可用</td>\n</tr>\n</tbody>\n</table>\n<p><strong>protected</strong>：不可以被用户访问，只可以被派生类访问  </p>\n<p><strong>private</strong>：都不可以访问，除了自己外。    </p>\n<h1 id=\"8、重写，重载，覆盖的关系\"><a href=\"#8、重写，重载，覆盖的关系\" class=\"headerlink\" title=\"8、重写，重载，覆盖的关系\"></a>8、<a href=\"http://blog.csdn.net/ericbaner/article/details/3857268\">重写，重载，覆盖的关系</a></h1><ul>\n<li><p>重写= 覆盖，是子类重写（覆盖）父类的方法，也就是同名同参数的方法   </p>\n</li>\n<li><p>重载，是一个作用域内有两个或者多个同名的方法（参数不一样），重载不能根据返回值不同进行重载       </p>\n</li>\n</ul>\n<h2 id=\"9-静态变量也全局变量的区别\"><a href=\"#9-静态变量也全局变量的区别\" class=\"headerlink\" title=\"9.静态变量也全局变量的区别\"></a>9.静态变量也全局变量的区别</h2><ul>\n<li>从内存分配来说：     <ul>\n<li>静态变量与全局变量都是在程序静态区域      </li>\n</ul>\n</li>\n<li>从链接属性来说：     <ul>\n<li>静态全局变量只能在本文件访问，全局变量能在多文件间访问     </li>\n</ul>\n</li>\n</ul>\n<p>静态全局变量与全局变量的区别就在于链接属性</p>\n<h2 id=\"二、关于编码问题\"><a href=\"#二、关于编码问题\" class=\"headerlink\" title=\"二、关于编码问题\"></a>二、关于编码问题</h2><p>1、<strong>Ascii</strong>：c语言中的ascii表，一个字节</p>\n<p>2、<strong>unicode</strong>：为了拓展表示更多的语言，例如中文就无法用ascii码表示，二个字节</p>\n<p>3、<strong>utf-8</strong>：用unicode可以解决编码的问题，但是全部采用二个字节一般情况下是比较浪费的，所以就出现了可变长的unicode编码方式。utf-8根据不同的字符编码成1-6个字节的可变长，常用 的英文字母就编码成一个字节与ascii码一至，中方字符则编码成三个字节。这样utf-8其实是包括了ascii的。</p>\n<h2 id=\"三、关于static关键字问题\"><a href=\"#三、关于static关键字问题\" class=\"headerlink\" title=\"三、关于static关键字问题\"></a>三、关于<code>static</code>关键字问题</h2><p>1、<strong>静态变量</strong>属于静态存储方式，其存储空间为内存中的静态数据区（在静态存储区内分配存储单元）；</p>\n<p>2、<strong>静态变量</strong>可以在任何可以申请的地方申请，一旦申请成功后，它将不再接受其他的同样申请。 函数体内如果在定义静态变量的同时进行了初始化，则以后程序不再进行初始化操作（出现在函数内部的基本类型的的静态变量初始化语句只有在第一次调用才执行）。而对自动变量赋初值是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">class test</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">private :</div><div class=\"line\"> int a;</div><div class=\"line\">public :</div><div class=\"line\">    test( int _a): a (_a)</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        NSLog ( @&quot;test:%d\\n&quot; , a );</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">void testFunction( int a)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  static test te(a);</div><div class=\"line\">    NSLog ( @&quot;\\n%p\\n&quot; ,&amp;te);</div><div class=\"line\">    static int bb= 10 ;</div><div class=\"line\">    NSLog ( @&quot;\\nbb value:%d\\n&quot; ,bb);</div><div class=\"line\"></div><div class=\"line\">    bb ++;</div><div class=\"line\">  NSLog ( @&quot;\\nbb value:%d\\n&quot; ,bb);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void TEST()</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">     testFunction ( 10 );</div><div class=\"line\"></div><div class=\"line\">    testFunction ( 11 );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>bb的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">10</div><div class=\"line\"></div><div class=\"line\">11</div><div class=\"line\"></div><div class=\"line\">11</div><div class=\"line\"></div><div class=\"line\">12</div></pre></td></tr></table></figure>\n<p>同理，test类的构造函数也只会调用一次 </p>\n<blockquote>\n<p> 它将不再接受其他的同样申请       </p>\n</blockquote>\n<h2 id=\"四、关于递归函数问题\"><a href=\"#四、关于递归函数问题\" class=\"headerlink\" title=\"四、关于递归函数问题\"></a>四、关于递归函数问题</h2><p>1、我们都知道递归层次过多会导致栈溢出，那么关于递归优化我们可以使用循环<code>while</code>来进行改写，其实我们也可以使用<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%BE%E8%B0%83%E7%94%A8\">尾递归</a>的方式进行改写。   </p>\n<p>2、尾调用，先来看一段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">func ()</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">.....</div><div class=\"line\"></div><div class=\"line\">return g()</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述例子中，func调用了g函数，在这种情况下当g函数运行完时无须返回到func函数中去，因此，栈中就不需要保存func的信息。<strong>CAUTION</strong>: <code>return g()</code>不能有多余的操作。尾递归其实就是一种尾调用。<em>但是现在一些编译器没有真的实现尾递归</em>。    </p>\n<h2 id=\"五、继承与组合\"><a href=\"#五、继承与组合\" class=\"headerlink\" title=\"五、继承与组合\"></a>五、继承与组合</h2><ul>\n<li>目中减少使用继承，另外也不宜使用深继承。因为继承使用对象之间形成强耦合关系。   </li>\n</ul>\n<h2 id=\"六、命令式编程，函数式编程及响应式编程\"><a href=\"#六、命令式编程，函数式编程及响应式编程\" class=\"headerlink\" title=\"六、命令式编程，函数式编程及响应式编程\"></a>六、命令式编程，函数式编程及响应式编程</h2><ul>\n<li><p>在命令式编程环境中, a= b+c  表示将表达式b+c的结果赋给a ，而之后b改变 或 c 的值不会影响a 。但在响应式编程中，a 的值会随着 b 或 c 的更新而更新。   </p>\n</li>\n<li><p>一般的编程语言是命令式编程（指令式编程），响应式可以联想到KVO,Notification   </p>\n</li>\n<li>函数式编程是以函数为主<a href=\"http://coolshell.cn/articles/10822.html\">参考</a></li>\n</ul>\n<h2 id=\"七、void-test-amp-test-理解：“-”是左结合性运算符，所以就可以理解了，然后就是void-是可以指向任何指针，so-done\"><a href=\"#七、void-test-amp-test-理解：“-”是左结合性运算符，所以就可以理解了，然后就是void-是可以指向任何指针，so-done\" class=\"headerlink\" title=\"七、void test = &amp;test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void 是可以指向任何指针，so done\"></a>七、void <em>test = &amp;test 理解：“=”是左结合性运算符，所以就可以理解了，然后就是void </em>是可以指向任何指针，so done</h2>"},{"title":"Python Dev","date":"2017-03-21T08:57:02.000Z","_content":"# Python 学习\n\n<!--More-->\n\n## 一、基础知识   \n\n### 1.0、逻辑运算（补充）\n \n|逻辑运算|python 表示|  \n| -- | --|  \n|与|and |  \n|或|or|  \n|非| not|  \n|异或|^|\n\n### 1.1、 关于list与tuple(元组),<font color = red> *数组*</font>\n\n1、`list` 是可变，`tuple`是不可变，可以用`tuple`的地方尽量用`tuple`；  \n\n2、`list`利用“[]”表示，`tuple`利用\"()\"表示  \n3、数组python用numpy来做的：  \n\n```\n\timport numpy\n\tmatrix = numpy.zeros(shape=(5,2))#创建数组\n\tprint matrix[i,j]#获取元素\n```\n\n### 1.2、关于dict,set\n\n参考c++map,set\n\n**CAUTION:** Python的集合(set)和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.由于集合是无序的,所以，sets 不支持 索引, 分片, 或其它类序列（sequence-like）的操作。Dict的key必须是不可变的\n\n### 1.3、关于python的可变参数与关键字参数\n\n1、可变参数就是传入的参数的个数是可变定义方式为`def func(*args)`。可变参数在函数调用时自动组装为一tuple。\n\n2、关键字参数可以传入零个或多个含参数名的参数也就是键值对，定义方式为`def func(**kv)`。关键字参数在函数调用时组装成一个dict。\n\n3、list,tuple可以在变量前面添加`*`来传入到参数为可变参数的函数，dict同样也可传入到参数为关键字参数的函数。\n\n4、由于3，对于任意函数我们都可以通过`def func(*args,**kv)`来调用它，不管他是怎么样定义的。\n\n5、python函数的参数顺序问题：必须函数，默认参数，可变参数，关键字参数  \n\n### 1.4、Python所谓的高级我切片与matlab的取第几行几列类似\n\n\n### 1.5、迭代使用`for ... in `或者`for value in d.iteatervalues()`同时也可以用`for k,v in d.iteritems()`\n例如：   \n\n```\n\td  = { a :1, b :2}\t\n\tfor key in d:\t\n\tprint key\n```\n1、但是要使用迭代一个对象，那么这个对象要是**可迭代的**，<font color = red>方法：可以通过collections 模块的iterable进行判断</font>      \n\n### 1.6、生成器(Generator)\n\n由于通过列表生成器生成一个列表时，受到内存的限制，列表的容量是有限的。所以如果可以按照一种算法进行推算出来，那就不必创建完整的list从而可以节省大量空间。创建generator的方法有多种：  \n\n第一种： \n\n```\n\tl = [ x*x for x in range(1,11) ]\t\n\tg = (x*x for x in range(1,11))   # g就是一个generator，与列表生成器不同的是[ ]与（ ）的问题  \n\tg.next()  # generator保存的是算法每次调用next()实际是在计算下一个元素，直到计算到最后的元素，当没有元素时就会抛出StopIteration的错误\n\tfor n in g: # 由于不断调用next（）函数并不是很方便，由于generator是可迭代对象，因此正确的使用方法是使用迭代\n\tprint n\n```\n\n第二种：\n在函数定义中如果包含yield关键字，那么这个函数就是一个generator      \n\n```\n\tdef fib(max):\t\n\t\t    n,a,b = 0,0,1\t\n\t\t    while n<max:\t\n\t\t        yield b      # yield关键字\n\t\t        a,b =b ,a+b\t\n\t\t        n = n+1\n```\n### 1.7、python高函数\n\n所谓的高阶函数就是一个函数接收函数作为参数\n\n### 1.8、map/reduce/filter\n\n[关于MapReduce文章]( http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf)    \n\n+ map/reduce demo  \n\n```\n\tdef str2int(s):\t\n\t\t    def fn(x,y):\t\n\t\t        return x*10+y\t\n\t\t    def char2num (s) :\t\n\t\t        return {  0  : 0 ,  1  : 1 ,  2  : 2 ,  3  : 3 ,  4  : 4 ,  5  : 5 ,  6  : 6 ,  7  : 7 ,  8  : 8 ,  9  : 9 }[s]\n\t\t    return reduce(fn,map(char2num,s))\n```\n\n<font color=red>**注意map,reduce都接收一个函数与一个list，因此第5行代码就好理解了**   </font>    \n\n+ filter 与map/reduce一样都 是高阶函数都是接收一个函数与list变量,filter是根据传入函数作用于每一个元素返回true/false来决定这个元素是否保留\n\n```\n\tdef is_odd(n):\t\n\t    return n%2 ==1\n\t   \tfilter(is_odd,[1,2,3,4,5])\n```   \n\n\n\n\n### 1.9、**funciton.partial偏函数**，把一个函数的某些参数给固定住，返回一个新函数，那么调用 这个函数就会简单一些。当一个函数的参数个数太多需要简化的时候可以使用functools.partial创建一个偏函数。\n\n```\n\t\timport functools\t\n\t\tint2 = functools.partial(int,base = 2) #int2就是一个新函数只有一个参数\n```    \n\n### 1.9.1 `@`语法\n\n\n开门见山，直上代码\n\n```\n\t\tdef log(func):\t\n\t\t        def wrapper(*args,**kw):\t\n\t\t            print  call %s %func.__name__\n\t\t            return func(*args,**kw)\t\n\t\treturn wrapper\n```  \n\n`log`函数接收一个函数作为参数，然后返回一个函数，这就叫做decorator。那么怎么用这个decorator呢？代码直上：  \n\n```\n\t\t@log\t\n\t\tdef now():\t\n\t\t    print  sdfdsfds \n```  \n\n`@`语法相当于：`now = log(now)`     \n  \n### 1.10、python用模块（module）来组织工程\n\n1、使用模块可以避免函数与变量名的冲突。一个.py文件 就是一个模块。\n\n2、为了避免模块名的冲突python引入package，本质就是按目录来组织模块\n\n3、package目录下一定要有一__init__.py模块，否则认为普通目录  \n\n4、注释也可采用  \n\n```\n\t\t\t‘’‘\n\t\t\n\t\t\t注释\n\t\t\t\n\t\t\t’‘’\n```\n\n### 1.11、关于`if __name__== main:`\n\n当我们用命令行运行模块的时候，Python解释器就会将一个特殊变量`__name__`置为`__main__`，而在其它地方导入该模块这个判断就会失败，也就是说这条语句主要是便于我们使用命令行。  \n\n### 1.12、作用域\n\nprivate访问控制在python里通过`_`或者`__`前缀来实现。这里所说的private只是一种编程习惯，因为python并没有private的控制访问。\n\n### 1.13、python面向对象编程(Object Oriented Programming,OOP)\n\n话不多说直接上demo\n\n```\n\t\tclass Student(object):                                 #表示Student从object继承 \n\t\t        def __init__(self,name,score):            #__init__类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数\n\t\t\n\t\t                self.name = name\t\n\t\t                self.score = score\t\n\t\t                super(Student,self).__init__()    #表示调用父类方法\n\t\t\t        def print_score(self):\t\n\t\t                print  %s,%s %(self.name,self.score)\n```    \n\n1、`__init__`类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数。    \n2、成员函数与普通函数不一样的地方就是第一个参数永远是self     \n3、private访问控制权限就是在变量前面添加`__`前缀。`_`在类中视为private但是其实是可以访问的，只是按约定视为private.    \n4、private变量其实也是可以访问的，可以通过`_类名_private变量`如`_Student_name`     \n5、  super(className,self).function()      父类方法调用<font color = red> 如果是多继承且多个父类有同样的方法则按顺序调用</font>\n\n### 1.14、关于python的多态\n\n由于python里不需要事先声明变量的类型，因此多态实现起来就简单得多：  \n\n```\n\t\tdef run(animal):\t\n\t\t    animal.run()\n```  \n\n代码中只要传入的参数有run这个方法就可以，<font color = red>**不管是不是animal还是子类或者不是子类**</font>，这样子就与c++里的多态一样。其实本质上是由于python本来就是动态语言。  \n\n### 1.15、获取对象信息\n\n1、type可以判断基本类型的所属类型\n\n```\n\timport types\t\n\ttype( ssdfdf )\n```\n\n2、isinstance可以判断基本数据类型还可以判断class类\n\n3、dir可以获取对象的所有属性和方法\n\n4、getattr(),setattr(),hasattr()可以操作一个对象的属性，顾名思义  \n\n### 1.16、python动态绑定方法\n\n```\n\tdef set_age(self,age):\t\n\t        self.age = age\t\t\n\tfrom types import MethodType\t\n\ts.set_age = MethodType(set_age,s,Student)          #给实例新增方法\n\tStudent.set_age = MethodType(set_age,None,Student)    #给类新增方法\n```   \n\n1、<font color = red>**`__slot__`**</font>关键字\n\n如果想对class限制只允许给类的实例添加属性时，我们可以使用`__slot__`，但是不遗传\n\n```\n\tclass Student(object):\t\n\t        __slot__ = ( name , age )  #用tuple定义允许修改的属性名称\n```\n\n###1.17、`@property`关键字\n\n`@property`负责将一个方法变成属性调用，而与一个属性不同的是属性并没有检查是否合法，而方法是可以进行检查的。\n\n\n```\n\tclass Student(object):\t\n\t        @property\t\n\t        def score(self):\t\n\t                return self._score\t\n\t        @score.setter\t\n\t        def score(self,value):\t\n\t                if():\n\t                        .....#参数检查\n\t                self._score = value\n\t\n\t>>>s = Student()\t\n\t>>>s.score = 10 #实际上是调用的s.set_score()\n\t>>>s.score #实际上调用 的是s.get_score()\n```\n\n`@property`把一个方法变成属性，`@xxx.setter`把一个方法变成属性赋值，与OC的property有一点相似\n\n### 1.18、多重继承\n\n### 1.19、定制类\n\n### 1.20、元类\n\n1、type动态创建一个对象\n\n```\n\thello = type( Hello ,(object,),dict(hello = fn))\n```  \n\ntype接收三个参数：\n\n+ class名字\n\n+ 参数2 为父类，是一个tuple（object,）\n\n+ dict(hello = fn),绑定函数到类的方法\n\n   \n\n2、metaclass元类，（OC中也有这个概念）   \n\n### 1.21、异常捕获`try:....except...finally...`\n\n```\n\ttry:\t\n\t    print  try.... \t\n\t    r = 10/0\t\n\t    print  reuslt: ,r\t\n\texcept ZeroDivisionError ,e:        #还可以多级捕获\n\t    print  error: ,e\t\n\tfinally:\t\n\t    print  finally... \n```   \n\n1、可以通过`raise`抛出异常，`raise`后面不带参数则将错误原样抛出，同样`raise`也可以修改抛出错误的类型  \n\n### 1.22、调试\n\n1、print打印信息\n\n2、asser断言\n\n3、logging推荐，可以定义log级别：debug,info,waning,error ,可以指定输出文件`logging.config.fileConfig(filename)`,[filename规则](https://docs.python.org/2/library/logging.config.html#logging-config-fileformat)  ，给一个log.conf\n\n```\n\t[loggers]\n\tkeys=root\n\t\n\t[handlers]\n\tkeys=consoleHandler,fileHandler\n\t\n\t[formatters]\n\tkeys=simpleFormatter\n\t\n\t[logger_root]\n\tlevel=DEBUG\n\thandlers=consoleHandler,fileHandler\n\t\n\t[handler_consoleHandler]\n\tclass=StreamHandler\n\tlevel=DEBUG\n\tformatter=simpleFormatter\n\targs=(sys.stdout,)\n\t\n\t[handler_fileHandler]\n\tclass=logging.handlers.TimedRotatingFileHandler\n\tlevel=DEBUG\n\tformatter=simpleFormatter\n\targs=('./log/sample.log','D',1,14)\n\t#args=('/data/iTOP_ROOT/dev/log/admin/pack/sample.log','D',1,14)\n\t\n\t[formatter_simpleFormatter]\n\tformat=[%(asctime)s][pid %(process)d][%(levelname)s][%(filename)s:%(lineno)d]%(message)s\n\tdatefmt=\n```\n\n使用方式：  \n\n```\n\tlogging.config.fileConfig('./log.conf')\n\tlogger = logging.getLogger('root')\n```\n\n4、[pdb]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683229901532c40b749184441dbd428d2e0f8aa50e000)   \n\n### 1.23、单元测试  \n\n### 1.24、文档测试（测试注释了的代码--python交互式代码）\n\n### 1.25、IO编程\n\n1、文件读写   \n\n```\n    f = open(filename,r)\n    f.read()\n    f.close\n```    \n\n为了保证会调用`close()`同时也是为了简单化，Python引入了`with`语法来帮助我们调用`close()`\n\n\n```\n\twith open( filename ,r ) as f:\n   \t\t print f.read()\n```   \n\n2、[操作文件和目录]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868321590543ff305fb9f9949f08d760883cc243812000)    \n\n3、序列化   \n\n+ python中序列化提供了两个模块来实现：`cPickle`和`pickle`(有`c`开头的就是用c语言实现的)[pickle参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683221577998e407bb309542d9b6a68d9276bc3dbe000)   \n\n+ json，`pickle`的问题在于序列化只能用在python中不能进行传递或者其它语言来解释，json刚好可以解决这个问题。\n\n| json | python |  \n| ---- | ---- |     \n| { } | dict |  \n| [ ] | list |  \n| \"string\" |  str 或者u unicode  |\n| 123.4 | int 或者 float |  \n| true/false | Ture /False |\n| null | None |   \n\n```\n\timport josn\t\n\td = dict(name = 'Bob',age = 10,score = 88)\tjson.dumps(d)  #dump意为转储\t\n\tjson.loads(str)#转成dict python对象\n```  \n\n<font color = red>**CAUTION:**</font>json反序列化得到字符串对象都是unicode不是str。  \n\n+ class 序列化（json的进阶）   \n\n```\n\tjson.dumps(s, \n\tdefault\n\t=lambda obj: obj.__dict__)#当class有__slot__属性时不能用 \n```      \n\n\n\n\n\n### 1.26、[进程与线程]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868323401155ceb3db1e2044f80b974b469eb06cb43000)     \n\n1、进程\n\n+ Unix/Linux下可以调用`fork()`实现多进程\n\n+ 跨平台的多进程，可以使用multiprocessing  \n\n+ 进程间的通信可以使用Queue,Pipes  \n\n2、线程，python中有两个模块（thread,threading，后者是高级，我们一般使用高级）\n\n+ 线程与进程最大的不同是，同一个变量在进程中是各自有一份copy互不影响，而多线程中所有的线程共享进程的变量，是相互影响的。因此在多线程中我们使用Lock来保证变量的不相互影响   \n\n\n\n\n```\n\timport time, threading \t\n\tbalance = 0\n\tlock = threading.Lock()\n\tdef change_it(n):    \t\n\t        global balance   \t\n\t         balance = balance + n\t\n\t         balance = balance - n \n\t def run_thread(n):    \t\n\t        for i in range(100000):\n\t               lock.acquire()     #先获取锁\t               try:                #try...finally保证不管什么情况下都会释放locK\n\t                   change_it(n)\n\t               finally:\n\t                   lock.release()  #释放锁\n\tif __name__ ==  __main__ :\n\t      t1 = threading.Thread(target=run_thread, args=(5,)) \n\t      t2 = threading.Thread(target=run_thread, args=(8,))   \n\t      t1.start()   \t\n\t      t2.start()   \t\n\t     t1.join()    \t\n\t    t2.join()  \t\n\t    print balance\n```    \n\n+ 在多线程下每一个线程要保持自己的数据时，我们可使用ThreadLocal, **ThreadLocal最常用的地方就是为每一个线程绑定一个数据库链接，http请求，用户身份信息等**\n\n\n\n```\n\timport threading\t\n\tlocal_shcool = threading.local()  #每一个线程都可以写，且相互不影响，可以理解为一个以thread为key的dict\n\tdef pro_std():\t\n\t    print hello,%s (in %s) %(loca_school.student,threading.current_thread().name)\n\tdef pro_thread(name):\t\n\t    local_shcool.student = name\t\n\t    \t    pro_std()\t\n\tt1 = threading.Thread(target = pro_thread,args = ( Alice ),name =  a )\n\tt2 = threading.Thread(target = pro_thread,args = ( Bob ),name =  B )\n\tt1.start()\t\n\tt2.start()\t\n\tt1.join()\t\n\tt2.join()\t\n```  \n\n### 1.27、分布式编程   \n\n[参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832973658c780d8bfa4c6406f83b2b3097aed5df6000)   \n\n### 1.28、正则表达式\n\n### 1.29常用内嵌模块  \n\n1、collections\n\n2、base64:base64是一种任意二进制到文本字符串的编码方法。**关于base64的理解：将3个字符串转成4个字符串，3 \\* 8 = 4\\*6，因此叫base64**  \n\n3、hashlib摘要算法库，md5,SHA1。md5结果是128bit,SHA1结果是160bit\n\n```\t\n\timport hashlib\t\n\tmd5 = hashlib.md5()\t\n\tmd5.update(  hello world )\t\n\tmd5.update( hdhhd )\t\n\tprint md5.hexdigest()\n```    \n\nSHA1与md5的调用 一样将上述代码改成SHA1即可  \n## 2、python进阶  \n### 2.1、Range与XRange的区别\n在 Range的方法中，它会生成一个**list**的对象，但是在XRange中，它生成的却是一个**xrange的对象**，当返回的东西不是很大的时候，或者在一个 循环里，基本上都是从头查到底的情况下，这两个方法的效率差不多。但是，当返回的东西很大，或者循环中常常会被Break出来的话，还是建议使用 XRange，这样既省空间，又会提高效率。\n\n### 2.2、ArgumentParser处理数组传入\n\n```\n\tap = argparse.ArgumentParser()\n    ap.add_argument('-p','--plugins',required = True, nargs = '+', help = 'the channel which you will test')\n```\n\n\n## 3、python实战\n### 3.1、[python制作gif]( http://python.jobbole.com/81185/)，然后可以在ppt导入    \n### 3.2、Tkinter UI  \n1、动态更新UI，使用`config`   \n```\n\troot = Tk()\n\tbtn = Button(root,text ='test')\n\tbtn.pack()\n\tbtn.config(state = 'disabled'）\n```   \n关于布局有三种，pack,grid,place[参考]( http://www.tutorialspoint.com/python/tk_pack.htm)   \n\n\n## 4、opencv python   \n### 4.1、反转黑白图片\n```\n\tthresh = cv2.thrsehold(image,122,255,cv2.THRESH_BINARY_INV)[1]\n```   \n\n### 4.2、[python进行条形码检测]( http://python.jobbole.com/81130/)    \n### 4.3、cv2  crop图片  \n```\n\timg = image[y:y+h,x:x+w]\n```   \n### 4.4、由文本生成图片，[参考](http://python.jobbole.com/81983/)     \n### 4.5、图片生成汉字库，关于怎么样将汉字切片可以[参考](http://python.jobbole.com/81985/)  ","source":"_posts/Python-Dev.md","raw":"---\ntitle: Python Dev\ndate: 2017-03-21 16:57:02\ntags: [Python, Dev]\ncategories: Python\n---\n# Python 学习\n\n<!--More-->\n\n## 一、基础知识   \n\n### 1.0、逻辑运算（补充）\n \n|逻辑运算|python 表示|  \n| -- | --|  \n|与|and |  \n|或|or|  \n|非| not|  \n|异或|^|\n\n### 1.1、 关于list与tuple(元组),<font color = red> *数组*</font>\n\n1、`list` 是可变，`tuple`是不可变，可以用`tuple`的地方尽量用`tuple`；  \n\n2、`list`利用“[]”表示，`tuple`利用\"()\"表示  \n3、数组python用numpy来做的：  \n\n```\n\timport numpy\n\tmatrix = numpy.zeros(shape=(5,2))#创建数组\n\tprint matrix[i,j]#获取元素\n```\n\n### 1.2、关于dict,set\n\n参考c++map,set\n\n**CAUTION:** Python的集合(set)和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.由于集合是无序的,所以，sets 不支持 索引, 分片, 或其它类序列（sequence-like）的操作。Dict的key必须是不可变的\n\n### 1.3、关于python的可变参数与关键字参数\n\n1、可变参数就是传入的参数的个数是可变定义方式为`def func(*args)`。可变参数在函数调用时自动组装为一tuple。\n\n2、关键字参数可以传入零个或多个含参数名的参数也就是键值对，定义方式为`def func(**kv)`。关键字参数在函数调用时组装成一个dict。\n\n3、list,tuple可以在变量前面添加`*`来传入到参数为可变参数的函数，dict同样也可传入到参数为关键字参数的函数。\n\n4、由于3，对于任意函数我们都可以通过`def func(*args,**kv)`来调用它，不管他是怎么样定义的。\n\n5、python函数的参数顺序问题：必须函数，默认参数，可变参数，关键字参数  \n\n### 1.4、Python所谓的高级我切片与matlab的取第几行几列类似\n\n\n### 1.5、迭代使用`for ... in `或者`for value in d.iteatervalues()`同时也可以用`for k,v in d.iteritems()`\n例如：   \n\n```\n\td  = { a :1, b :2}\t\n\tfor key in d:\t\n\tprint key\n```\n1、但是要使用迭代一个对象，那么这个对象要是**可迭代的**，<font color = red>方法：可以通过collections 模块的iterable进行判断</font>      \n\n### 1.6、生成器(Generator)\n\n由于通过列表生成器生成一个列表时，受到内存的限制，列表的容量是有限的。所以如果可以按照一种算法进行推算出来，那就不必创建完整的list从而可以节省大量空间。创建generator的方法有多种：  \n\n第一种： \n\n```\n\tl = [ x*x for x in range(1,11) ]\t\n\tg = (x*x for x in range(1,11))   # g就是一个generator，与列表生成器不同的是[ ]与（ ）的问题  \n\tg.next()  # generator保存的是算法每次调用next()实际是在计算下一个元素，直到计算到最后的元素，当没有元素时就会抛出StopIteration的错误\n\tfor n in g: # 由于不断调用next（）函数并不是很方便，由于generator是可迭代对象，因此正确的使用方法是使用迭代\n\tprint n\n```\n\n第二种：\n在函数定义中如果包含yield关键字，那么这个函数就是一个generator      \n\n```\n\tdef fib(max):\t\n\t\t    n,a,b = 0,0,1\t\n\t\t    while n<max:\t\n\t\t        yield b      # yield关键字\n\t\t        a,b =b ,a+b\t\n\t\t        n = n+1\n```\n### 1.7、python高函数\n\n所谓的高阶函数就是一个函数接收函数作为参数\n\n### 1.8、map/reduce/filter\n\n[关于MapReduce文章]( http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf)    \n\n+ map/reduce demo  \n\n```\n\tdef str2int(s):\t\n\t\t    def fn(x,y):\t\n\t\t        return x*10+y\t\n\t\t    def char2num (s) :\t\n\t\t        return {  0  : 0 ,  1  : 1 ,  2  : 2 ,  3  : 3 ,  4  : 4 ,  5  : 5 ,  6  : 6 ,  7  : 7 ,  8  : 8 ,  9  : 9 }[s]\n\t\t    return reduce(fn,map(char2num,s))\n```\n\n<font color=red>**注意map,reduce都接收一个函数与一个list，因此第5行代码就好理解了**   </font>    \n\n+ filter 与map/reduce一样都 是高阶函数都是接收一个函数与list变量,filter是根据传入函数作用于每一个元素返回true/false来决定这个元素是否保留\n\n```\n\tdef is_odd(n):\t\n\t    return n%2 ==1\n\t   \tfilter(is_odd,[1,2,3,4,5])\n```   \n\n\n\n\n### 1.9、**funciton.partial偏函数**，把一个函数的某些参数给固定住，返回一个新函数，那么调用 这个函数就会简单一些。当一个函数的参数个数太多需要简化的时候可以使用functools.partial创建一个偏函数。\n\n```\n\t\timport functools\t\n\t\tint2 = functools.partial(int,base = 2) #int2就是一个新函数只有一个参数\n```    \n\n### 1.9.1 `@`语法\n\n\n开门见山，直上代码\n\n```\n\t\tdef log(func):\t\n\t\t        def wrapper(*args,**kw):\t\n\t\t            print  call %s %func.__name__\n\t\t            return func(*args,**kw)\t\n\t\treturn wrapper\n```  \n\n`log`函数接收一个函数作为参数，然后返回一个函数，这就叫做decorator。那么怎么用这个decorator呢？代码直上：  \n\n```\n\t\t@log\t\n\t\tdef now():\t\n\t\t    print  sdfdsfds \n```  \n\n`@`语法相当于：`now = log(now)`     \n  \n### 1.10、python用模块（module）来组织工程\n\n1、使用模块可以避免函数与变量名的冲突。一个.py文件 就是一个模块。\n\n2、为了避免模块名的冲突python引入package，本质就是按目录来组织模块\n\n3、package目录下一定要有一__init__.py模块，否则认为普通目录  \n\n4、注释也可采用  \n\n```\n\t\t\t‘’‘\n\t\t\n\t\t\t注释\n\t\t\t\n\t\t\t’‘’\n```\n\n### 1.11、关于`if __name__== main:`\n\n当我们用命令行运行模块的时候，Python解释器就会将一个特殊变量`__name__`置为`__main__`，而在其它地方导入该模块这个判断就会失败，也就是说这条语句主要是便于我们使用命令行。  \n\n### 1.12、作用域\n\nprivate访问控制在python里通过`_`或者`__`前缀来实现。这里所说的private只是一种编程习惯，因为python并没有private的控制访问。\n\n### 1.13、python面向对象编程(Object Oriented Programming,OOP)\n\n话不多说直接上demo\n\n```\n\t\tclass Student(object):                                 #表示Student从object继承 \n\t\t        def __init__(self,name,score):            #__init__类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数\n\t\t\n\t\t                self.name = name\t\n\t\t                self.score = score\t\n\t\t                super(Student,self).__init__()    #表示调用父类方法\n\t\t\t        def print_score(self):\t\n\t\t                print  %s,%s %(self.name,self.score)\n```    \n\n1、`__init__`类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数。    \n2、成员函数与普通函数不一样的地方就是第一个参数永远是self     \n3、private访问控制权限就是在变量前面添加`__`前缀。`_`在类中视为private但是其实是可以访问的，只是按约定视为private.    \n4、private变量其实也是可以访问的，可以通过`_类名_private变量`如`_Student_name`     \n5、  super(className,self).function()      父类方法调用<font color = red> 如果是多继承且多个父类有同样的方法则按顺序调用</font>\n\n### 1.14、关于python的多态\n\n由于python里不需要事先声明变量的类型，因此多态实现起来就简单得多：  \n\n```\n\t\tdef run(animal):\t\n\t\t    animal.run()\n```  \n\n代码中只要传入的参数有run这个方法就可以，<font color = red>**不管是不是animal还是子类或者不是子类**</font>，这样子就与c++里的多态一样。其实本质上是由于python本来就是动态语言。  \n\n### 1.15、获取对象信息\n\n1、type可以判断基本类型的所属类型\n\n```\n\timport types\t\n\ttype( ssdfdf )\n```\n\n2、isinstance可以判断基本数据类型还可以判断class类\n\n3、dir可以获取对象的所有属性和方法\n\n4、getattr(),setattr(),hasattr()可以操作一个对象的属性，顾名思义  \n\n### 1.16、python动态绑定方法\n\n```\n\tdef set_age(self,age):\t\n\t        self.age = age\t\t\n\tfrom types import MethodType\t\n\ts.set_age = MethodType(set_age,s,Student)          #给实例新增方法\n\tStudent.set_age = MethodType(set_age,None,Student)    #给类新增方法\n```   \n\n1、<font color = red>**`__slot__`**</font>关键字\n\n如果想对class限制只允许给类的实例添加属性时，我们可以使用`__slot__`，但是不遗传\n\n```\n\tclass Student(object):\t\n\t        __slot__ = ( name , age )  #用tuple定义允许修改的属性名称\n```\n\n###1.17、`@property`关键字\n\n`@property`负责将一个方法变成属性调用，而与一个属性不同的是属性并没有检查是否合法，而方法是可以进行检查的。\n\n\n```\n\tclass Student(object):\t\n\t        @property\t\n\t        def score(self):\t\n\t                return self._score\t\n\t        @score.setter\t\n\t        def score(self,value):\t\n\t                if():\n\t                        .....#参数检查\n\t                self._score = value\n\t\n\t>>>s = Student()\t\n\t>>>s.score = 10 #实际上是调用的s.set_score()\n\t>>>s.score #实际上调用 的是s.get_score()\n```\n\n`@property`把一个方法变成属性，`@xxx.setter`把一个方法变成属性赋值，与OC的property有一点相似\n\n### 1.18、多重继承\n\n### 1.19、定制类\n\n### 1.20、元类\n\n1、type动态创建一个对象\n\n```\n\thello = type( Hello ,(object,),dict(hello = fn))\n```  \n\ntype接收三个参数：\n\n+ class名字\n\n+ 参数2 为父类，是一个tuple（object,）\n\n+ dict(hello = fn),绑定函数到类的方法\n\n   \n\n2、metaclass元类，（OC中也有这个概念）   \n\n### 1.21、异常捕获`try:....except...finally...`\n\n```\n\ttry:\t\n\t    print  try.... \t\n\t    r = 10/0\t\n\t    print  reuslt: ,r\t\n\texcept ZeroDivisionError ,e:        #还可以多级捕获\n\t    print  error: ,e\t\n\tfinally:\t\n\t    print  finally... \n```   \n\n1、可以通过`raise`抛出异常，`raise`后面不带参数则将错误原样抛出，同样`raise`也可以修改抛出错误的类型  \n\n### 1.22、调试\n\n1、print打印信息\n\n2、asser断言\n\n3、logging推荐，可以定义log级别：debug,info,waning,error ,可以指定输出文件`logging.config.fileConfig(filename)`,[filename规则](https://docs.python.org/2/library/logging.config.html#logging-config-fileformat)  ，给一个log.conf\n\n```\n\t[loggers]\n\tkeys=root\n\t\n\t[handlers]\n\tkeys=consoleHandler,fileHandler\n\t\n\t[formatters]\n\tkeys=simpleFormatter\n\t\n\t[logger_root]\n\tlevel=DEBUG\n\thandlers=consoleHandler,fileHandler\n\t\n\t[handler_consoleHandler]\n\tclass=StreamHandler\n\tlevel=DEBUG\n\tformatter=simpleFormatter\n\targs=(sys.stdout,)\n\t\n\t[handler_fileHandler]\n\tclass=logging.handlers.TimedRotatingFileHandler\n\tlevel=DEBUG\n\tformatter=simpleFormatter\n\targs=('./log/sample.log','D',1,14)\n\t#args=('/data/iTOP_ROOT/dev/log/admin/pack/sample.log','D',1,14)\n\t\n\t[formatter_simpleFormatter]\n\tformat=[%(asctime)s][pid %(process)d][%(levelname)s][%(filename)s:%(lineno)d]%(message)s\n\tdatefmt=\n```\n\n使用方式：  \n\n```\n\tlogging.config.fileConfig('./log.conf')\n\tlogger = logging.getLogger('root')\n```\n\n4、[pdb]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683229901532c40b749184441dbd428d2e0f8aa50e000)   \n\n### 1.23、单元测试  \n\n### 1.24、文档测试（测试注释了的代码--python交互式代码）\n\n### 1.25、IO编程\n\n1、文件读写   \n\n```\n    f = open(filename,r)\n    f.read()\n    f.close\n```    \n\n为了保证会调用`close()`同时也是为了简单化，Python引入了`with`语法来帮助我们调用`close()`\n\n\n```\n\twith open( filename ,r ) as f:\n   \t\t print f.read()\n```   \n\n2、[操作文件和目录]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868321590543ff305fb9f9949f08d760883cc243812000)    \n\n3、序列化   \n\n+ python中序列化提供了两个模块来实现：`cPickle`和`pickle`(有`c`开头的就是用c语言实现的)[pickle参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683221577998e407bb309542d9b6a68d9276bc3dbe000)   \n\n+ json，`pickle`的问题在于序列化只能用在python中不能进行传递或者其它语言来解释，json刚好可以解决这个问题。\n\n| json | python |  \n| ---- | ---- |     \n| { } | dict |  \n| [ ] | list |  \n| \"string\" |  str 或者u unicode  |\n| 123.4 | int 或者 float |  \n| true/false | Ture /False |\n| null | None |   \n\n```\n\timport josn\t\n\td = dict(name = 'Bob',age = 10,score = 88)\tjson.dumps(d)  #dump意为转储\t\n\tjson.loads(str)#转成dict python对象\n```  \n\n<font color = red>**CAUTION:**</font>json反序列化得到字符串对象都是unicode不是str。  \n\n+ class 序列化（json的进阶）   \n\n```\n\tjson.dumps(s, \n\tdefault\n\t=lambda obj: obj.__dict__)#当class有__slot__属性时不能用 \n```      \n\n\n\n\n\n### 1.26、[进程与线程]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868323401155ceb3db1e2044f80b974b469eb06cb43000)     \n\n1、进程\n\n+ Unix/Linux下可以调用`fork()`实现多进程\n\n+ 跨平台的多进程，可以使用multiprocessing  \n\n+ 进程间的通信可以使用Queue,Pipes  \n\n2、线程，python中有两个模块（thread,threading，后者是高级，我们一般使用高级）\n\n+ 线程与进程最大的不同是，同一个变量在进程中是各自有一份copy互不影响，而多线程中所有的线程共享进程的变量，是相互影响的。因此在多线程中我们使用Lock来保证变量的不相互影响   \n\n\n\n\n```\n\timport time, threading \t\n\tbalance = 0\n\tlock = threading.Lock()\n\tdef change_it(n):    \t\n\t        global balance   \t\n\t         balance = balance + n\t\n\t         balance = balance - n \n\t def run_thread(n):    \t\n\t        for i in range(100000):\n\t               lock.acquire()     #先获取锁\t               try:                #try...finally保证不管什么情况下都会释放locK\n\t                   change_it(n)\n\t               finally:\n\t                   lock.release()  #释放锁\n\tif __name__ ==  __main__ :\n\t      t1 = threading.Thread(target=run_thread, args=(5,)) \n\t      t2 = threading.Thread(target=run_thread, args=(8,))   \n\t      t1.start()   \t\n\t      t2.start()   \t\n\t     t1.join()    \t\n\t    t2.join()  \t\n\t    print balance\n```    \n\n+ 在多线程下每一个线程要保持自己的数据时，我们可使用ThreadLocal, **ThreadLocal最常用的地方就是为每一个线程绑定一个数据库链接，http请求，用户身份信息等**\n\n\n\n```\n\timport threading\t\n\tlocal_shcool = threading.local()  #每一个线程都可以写，且相互不影响，可以理解为一个以thread为key的dict\n\tdef pro_std():\t\n\t    print hello,%s (in %s) %(loca_school.student,threading.current_thread().name)\n\tdef pro_thread(name):\t\n\t    local_shcool.student = name\t\n\t    \t    pro_std()\t\n\tt1 = threading.Thread(target = pro_thread,args = ( Alice ),name =  a )\n\tt2 = threading.Thread(target = pro_thread,args = ( Bob ),name =  B )\n\tt1.start()\t\n\tt2.start()\t\n\tt1.join()\t\n\tt2.join()\t\n```  \n\n### 1.27、分布式编程   \n\n[参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832973658c780d8bfa4c6406f83b2b3097aed5df6000)   \n\n### 1.28、正则表达式\n\n### 1.29常用内嵌模块  \n\n1、collections\n\n2、base64:base64是一种任意二进制到文本字符串的编码方法。**关于base64的理解：将3个字符串转成4个字符串，3 \\* 8 = 4\\*6，因此叫base64**  \n\n3、hashlib摘要算法库，md5,SHA1。md5结果是128bit,SHA1结果是160bit\n\n```\t\n\timport hashlib\t\n\tmd5 = hashlib.md5()\t\n\tmd5.update(  hello world )\t\n\tmd5.update( hdhhd )\t\n\tprint md5.hexdigest()\n```    \n\nSHA1与md5的调用 一样将上述代码改成SHA1即可  \n## 2、python进阶  \n### 2.1、Range与XRange的区别\n在 Range的方法中，它会生成一个**list**的对象，但是在XRange中，它生成的却是一个**xrange的对象**，当返回的东西不是很大的时候，或者在一个 循环里，基本上都是从头查到底的情况下，这两个方法的效率差不多。但是，当返回的东西很大，或者循环中常常会被Break出来的话，还是建议使用 XRange，这样既省空间，又会提高效率。\n\n### 2.2、ArgumentParser处理数组传入\n\n```\n\tap = argparse.ArgumentParser()\n    ap.add_argument('-p','--plugins',required = True, nargs = '+', help = 'the channel which you will test')\n```\n\n\n## 3、python实战\n### 3.1、[python制作gif]( http://python.jobbole.com/81185/)，然后可以在ppt导入    \n### 3.2、Tkinter UI  \n1、动态更新UI，使用`config`   \n```\n\troot = Tk()\n\tbtn = Button(root,text ='test')\n\tbtn.pack()\n\tbtn.config(state = 'disabled'）\n```   \n关于布局有三种，pack,grid,place[参考]( http://www.tutorialspoint.com/python/tk_pack.htm)   \n\n\n## 4、opencv python   \n### 4.1、反转黑白图片\n```\n\tthresh = cv2.thrsehold(image,122,255,cv2.THRESH_BINARY_INV)[1]\n```   \n\n### 4.2、[python进行条形码检测]( http://python.jobbole.com/81130/)    \n### 4.3、cv2  crop图片  \n```\n\timg = image[y:y+h,x:x+w]\n```   \n### 4.4、由文本生成图片，[参考](http://python.jobbole.com/81983/)     \n### 4.5、图片生成汉字库，关于怎么样将汉字切片可以[参考](http://python.jobbole.com/81985/)  ","slug":"Python-Dev","published":1,"updated":"2017-03-30T11:16:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wr70005sjvezhlit2ru","content":"<h1 id=\"Python-学习\"><a href=\"#Python-学习\" class=\"headerlink\" title=\"Python 学习\"></a>Python 学习</h1><a id=\"more\"></a>\n<h2 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h2><h3 id=\"1-0、逻辑运算（补充）\"><a href=\"#1-0、逻辑运算（补充）\" class=\"headerlink\" title=\"1.0、逻辑运算（补充）\"></a>1.0、逻辑运算（补充）</h3><table>\n<thead>\n<tr>\n<th>逻辑运算</th>\n<th>python 表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>与</td>\n<td>and</td>\n</tr>\n<tr>\n<td>或</td>\n<td>or</td>\n</tr>\n<tr>\n<td>非</td>\n<td>not</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-1、-关于list与tuple-元组-数组\"><a href=\"#1-1、-关于list与tuple-元组-数组\" class=\"headerlink\" title=\"1.1、 关于list与tuple(元组), 数组\"></a>1.1、 关于list与tuple(元组),<font color=\"red\"> <em>数组</em></font></h3><p>1、<code>list</code> 是可变，<code>tuple</code>是不可变，可以用<code>tuple</code>的地方尽量用<code>tuple</code>；  </p>\n<p>2、<code>list</code>利用“[]”表示，<code>tuple</code>利用”()”表示<br>3、数组python用numpy来做的：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import numpy</div><div class=\"line\">matrix = numpy.zeros(shape=(5,2))#创建数组</div><div class=\"line\">print matrix[i,j]#获取元素</div></pre></td></tr></table></figure>\n<h3 id=\"1-2、关于dict-set\"><a href=\"#1-2、关于dict-set\" class=\"headerlink\" title=\"1.2、关于dict,set\"></a>1.2、关于dict,set</h3><p>参考c++map,set</p>\n<p><strong>CAUTION:</strong> Python的集合(set)和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.由于集合是无序的,所以，sets 不支持 索引, 分片, 或其它类序列（sequence-like）的操作。Dict的key必须是不可变的</p>\n<h3 id=\"1-3、关于python的可变参数与关键字参数\"><a href=\"#1-3、关于python的可变参数与关键字参数\" class=\"headerlink\" title=\"1.3、关于python的可变参数与关键字参数\"></a>1.3、关于python的可变参数与关键字参数</h3><p>1、可变参数就是传入的参数的个数是可变定义方式为<code>def func(*args)</code>。可变参数在函数调用时自动组装为一tuple。</p>\n<p>2、关键字参数可以传入零个或多个含参数名的参数也就是键值对，定义方式为<code>def func(**kv)</code>。关键字参数在函数调用时组装成一个dict。</p>\n<p>3、list,tuple可以在变量前面添加<code>*</code>来传入到参数为可变参数的函数，dict同样也可传入到参数为关键字参数的函数。</p>\n<p>4、由于3，对于任意函数我们都可以通过<code>def func(*args,**kv)</code>来调用它，不管他是怎么样定义的。</p>\n<p>5、python函数的参数顺序问题：必须函数，默认参数，可变参数，关键字参数  </p>\n<h3 id=\"1-4、Python所谓的高级我切片与matlab的取第几行几列类似\"><a href=\"#1-4、Python所谓的高级我切片与matlab的取第几行几列类似\" class=\"headerlink\" title=\"1.4、Python所谓的高级我切片与matlab的取第几行几列类似\"></a>1.4、Python所谓的高级我切片与matlab的取第几行几列类似</h3><h3 id=\"1-5、迭代使用for-in或者for-value-in-d-iteatervalues-同时也可以用for-k-v-in-d-iteritems\"><a href=\"#1-5、迭代使用for-in或者for-value-in-d-iteatervalues-同时也可以用for-k-v-in-d-iteritems\" class=\"headerlink\" title=\"1.5、迭代使用for ... in或者for value in d.iteatervalues()同时也可以用for k,v in d.iteritems()\"></a>1.5、迭代使用<code>for ... in</code>或者<code>for value in d.iteatervalues()</code>同时也可以用<code>for k,v in d.iteritems()</code></h3><p>例如：   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">d  = &#123; a :1, b :2&#125;\t</div><div class=\"line\">for key in d:\t</div><div class=\"line\">print key</div></pre></td></tr></table></figure>\n<p>1、但是要使用迭代一个对象，那么这个对象要是<strong>可迭代的</strong>，<font color=\"red\">方法：可以通过collections 模块的iterable进行判断</font>      </p>\n<h3 id=\"1-6、生成器-Generator\"><a href=\"#1-6、生成器-Generator\" class=\"headerlink\" title=\"1.6、生成器(Generator)\"></a>1.6、生成器(Generator)</h3><p>由于通过列表生成器生成一个列表时，受到内存的限制，列表的容量是有限的。所以如果可以按照一种算法进行推算出来，那就不必创建完整的list从而可以节省大量空间。创建generator的方法有多种：  </p>\n<p>第一种： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">l = [ x*x for x in range(1,11) ]\t</div><div class=\"line\">g = (x*x for x in range(1,11))   # g就是一个generator，与列表生成器不同的是[ ]与（ ）的问题  </div><div class=\"line\">g.next()  # generator保存的是算法每次调用next()实际是在计算下一个元素，直到计算到最后的元素，当没有元素时就会抛出StopIteration的错误</div><div class=\"line\">for n in g: # 由于不断调用next（）函数并不是很方便，由于generator是可迭代对象，因此正确的使用方法是使用迭代</div><div class=\"line\">print n</div></pre></td></tr></table></figure>\n<p>第二种：<br>在函数定义中如果包含yield关键字，那么这个函数就是一个generator      </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def fib(max):\t</div><div class=\"line\">\t    n,a,b = 0,0,1\t</div><div class=\"line\">\t    while n&lt;max:\t</div><div class=\"line\">\t        yield b      # yield关键字</div><div class=\"line\">\t        a,b =b ,a+b\t</div><div class=\"line\">\t        n = n+1</div></pre></td></tr></table></figure>\n<h3 id=\"1-7、python高函数\"><a href=\"#1-7、python高函数\" class=\"headerlink\" title=\"1.7、python高函数\"></a>1.7、python高函数</h3><p>所谓的高阶函数就是一个函数接收函数作为参数</p>\n<h3 id=\"1-8、map-reduce-filter\"><a href=\"#1-8、map-reduce-filter\" class=\"headerlink\" title=\"1.8、map/reduce/filter\"></a>1.8、map/reduce/filter</h3><p><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf\" target=\"_blank\" rel=\"external\">关于MapReduce文章</a>    </p>\n<ul>\n<li>map/reduce demo  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def str2int(s):\t</div><div class=\"line\">\t    def fn(x,y):\t</div><div class=\"line\">\t        return x*10+y\t</div><div class=\"line\">\t    def char2num (s) :\t</div><div class=\"line\">\t        return &#123;  0  : 0 ,  1  : 1 ,  2  : 2 ,  3  : 3 ,  4  : 4 ,  5  : 5 ,  6  : 6 ,  7  : 7 ,  8  : 8 ,  9  : 9 &#125;[s]</div><div class=\"line\">\t    return reduce(fn,map(char2num,s))</div></pre></td></tr></table></figure>\n<font color=\"red\"><strong>注意map,reduce都接收一个函数与一个list，因此第5行代码就好理解了</strong>   </font>    \n\n<ul>\n<li>filter 与map/reduce一样都 是高阶函数都是接收一个函数与list变量,filter是根据传入函数作用于每一个元素返回true/false来决定这个元素是否保留</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tdef is_odd(n):\t</div><div class=\"line\">\t    return n%2 ==1</div><div class=\"line\">\t   \tfilter(is_odd,[1,2,3,4,5])</div><div class=\"line\">```   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 1.9、**funciton.partial偏函数**，把一个函数的某些参数给固定住，返回一个新函数，那么调用 这个函数就会简单一些。当一个函数的参数个数太多需要简化的时候可以使用functools.partial创建一个偏函数。</div></pre></td></tr></table></figure>\n<pre><code>import functools    \nint2 = functools.partial(int,base = 2) #int2就是一个新函数只有一个参数\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.9.1 `@`语法</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">开门见山，直上代码</div></pre></td></tr></table></figure>\n<pre><code>def log(func):    \n        def wrapper(*args,**kw):    \n            print  call %s %func.__name__\n            return func(*args,**kw)    \nreturn wrapper\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`log`函数接收一个函数作为参数，然后返回一个函数，这就叫做decorator。那么怎么用这个decorator呢？代码直上：</div></pre></td></tr></table></figure>\n<pre><code>@log    \ndef now():    \n    print  sdfdsfds \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`@`语法相当于：`now = log(now)`     </div><div class=\"line\">  </div><div class=\"line\">### 1.10、python用模块（module）来组织工程</div><div class=\"line\"></div><div class=\"line\">1、使用模块可以避免函数与变量名的冲突。一个.py文件 就是一个模块。</div><div class=\"line\"></div><div class=\"line\">2、为了避免模块名的冲突python引入package，本质就是按目录来组织模块</div><div class=\"line\"></div><div class=\"line\">3、package目录下一定要有一__init__.py模块，否则认为普通目录  </div><div class=\"line\"></div><div class=\"line\">4、注释也可采用</div></pre></td></tr></table></figure>\n<pre><code>‘’‘\n\n注释\n\n’‘’\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.11、关于`if __name__== main:`</div><div class=\"line\"></div><div class=\"line\">当我们用命令行运行模块的时候，Python解释器就会将一个特殊变量`__name__`置为`__main__`，而在其它地方导入该模块这个判断就会失败，也就是说这条语句主要是便于我们使用命令行。  </div><div class=\"line\"></div><div class=\"line\">### 1.12、作用域</div><div class=\"line\"></div><div class=\"line\">private访问控制在python里通过`_`或者`__`前缀来实现。这里所说的private只是一种编程习惯，因为python并没有private的控制访问。</div><div class=\"line\"></div><div class=\"line\">### 1.13、python面向对象编程(Object Oriented Programming,OOP)</div><div class=\"line\"></div><div class=\"line\">话不多说直接上demo</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):                                 #表示Student从object继承 \n        def __init__(self,name,score):            #__init__类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数\n\n                self.name = name    \n                self.score = score    \n                super(Student,self).__init__()    #表示调用父类方法\n            def print_score(self):    \n                print  %s,%s %(self.name,self.score)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、`__init__`类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数。    </div><div class=\"line\">2、成员函数与普通函数不一样的地方就是第一个参数永远是self     </div><div class=\"line\">3、private访问控制权限就是在变量前面添加`__`前缀。`_`在类中视为private但是其实是可以访问的，只是按约定视为private.    </div><div class=\"line\">4、private变量其实也是可以访问的，可以通过`_类名_private变量`如`_Student_name`     </div><div class=\"line\">5、  super(className,self).function()      父类方法调用&lt;font color = red&gt; 如果是多继承且多个父类有同样的方法则按顺序调用&lt;/font&gt;</div><div class=\"line\"></div><div class=\"line\">### 1.14、关于python的多态</div><div class=\"line\"></div><div class=\"line\">由于python里不需要事先声明变量的类型，因此多态实现起来就简单得多：</div></pre></td></tr></table></figure>\n<pre><code>def run(animal):    \n    animal.run()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">代码中只要传入的参数有run这个方法就可以，&lt;font color = red&gt;**不管是不是animal还是子类或者不是子类**&lt;/font&gt;，这样子就与c++里的多态一样。其实本质上是由于python本来就是动态语言。  </div><div class=\"line\"></div><div class=\"line\">### 1.15、获取对象信息</div><div class=\"line\"></div><div class=\"line\">1、type可以判断基本类型的所属类型</div></pre></td></tr></table></figure>\n<pre><code>import types    \ntype( ssdfdf )\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2、isinstance可以判断基本数据类型还可以判断class类</div><div class=\"line\"></div><div class=\"line\">3、dir可以获取对象的所有属性和方法</div><div class=\"line\"></div><div class=\"line\">4、getattr(),setattr(),hasattr()可以操作一个对象的属性，顾名思义  </div><div class=\"line\"></div><div class=\"line\">### 1.16、python动态绑定方法</div></pre></td></tr></table></figure>\n<pre><code>def set_age(self,age):    \n        self.age = age        \nfrom types import MethodType    \ns.set_age = MethodType(set_age,s,Student)          #给实例新增方法\nStudent.set_age = MethodType(set_age,None,Student)    #给类新增方法\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、&lt;font color = red&gt;**`__slot__`**&lt;/font&gt;关键字</div><div class=\"line\"></div><div class=\"line\">如果想对class限制只允许给类的实例添加属性时，我们可以使用`__slot__`，但是不遗传</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):    \n        __slot__ = ( name , age )  #用tuple定义允许修改的属性名称\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">###1.17、`@property`关键字</div><div class=\"line\"></div><div class=\"line\">`@property`负责将一个方法变成属性调用，而与一个属性不同的是属性并没有检查是否合法，而方法是可以进行检查的。</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):    \n        @property    \n        def score(self):    \n                return self._score    \n        @score.setter    \n        def score(self,value):    \n                if():\n                        .....#参数检查\n                self._score = value\n\n&gt;&gt;&gt;s = Student()    \n&gt;&gt;&gt;s.score = 10 #实际上是调用的s.set_score()\n&gt;&gt;&gt;s.score #实际上调用 的是s.get_score()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`@property`把一个方法变成属性，`@xxx.setter`把一个方法变成属性赋值，与OC的property有一点相似</div><div class=\"line\"></div><div class=\"line\">### 1.18、多重继承</div><div class=\"line\"></div><div class=\"line\">### 1.19、定制类</div><div class=\"line\"></div><div class=\"line\">### 1.20、元类</div><div class=\"line\"></div><div class=\"line\">1、type动态创建一个对象</div></pre></td></tr></table></figure>\n<pre><code>hello = type( Hello ,(object,),dict(hello = fn))\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">type接收三个参数：</div><div class=\"line\"></div><div class=\"line\">+ class名字</div><div class=\"line\"></div><div class=\"line\">+ 参数2 为父类，是一个tuple（object,）</div><div class=\"line\"></div><div class=\"line\">+ dict(hello = fn),绑定函数到类的方法</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">2、metaclass元类，（OC中也有这个概念）   </div><div class=\"line\"></div><div class=\"line\">### 1.21、异常捕获`try:....except...finally...`</div></pre></td></tr></table></figure>\n<pre><code>try:    \n    print  try....     \n    r = 10/0    \n    print  reuslt: ,r    \nexcept ZeroDivisionError ,e:        #还可以多级捕获\n    print  error: ,e    \nfinally:    \n    print  finally... \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、可以通过`raise`抛出异常，`raise`后面不带参数则将错误原样抛出，同样`raise`也可以修改抛出错误的类型  </div><div class=\"line\"></div><div class=\"line\">### 1.22、调试</div><div class=\"line\"></div><div class=\"line\">1、print打印信息</div><div class=\"line\"></div><div class=\"line\">2、asser断言</div><div class=\"line\"></div><div class=\"line\">3、logging推荐，可以定义log级别：debug,info,waning,error ,可以指定输出文件`logging.config.fileConfig(filename)`,[filename规则](https://docs.python.org/2/library/logging.config.html#logging-config-fileformat)  ，给一个log.conf</div></pre></td></tr></table></figure>\n<pre><code>[loggers]\nkeys=root\n\n[handlers]\nkeys=consoleHandler,fileHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[handler_fileHandler]\nclass=logging.handlers.TimedRotatingFileHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(&apos;./log/sample.log&apos;,&apos;D&apos;,1,14)\n#args=(&apos;/data/iTOP_ROOT/dev/log/admin/pack/sample.log&apos;,&apos;D&apos;,1,14)\n\n[formatter_simpleFormatter]\nformat=[%(asctime)s][pid %(process)d][%(levelname)s][%(filename)s:%(lineno)d]%(message)s\ndatefmt=\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用方式：</div></pre></td></tr></table></figure>\n<pre><code>logging.config.fileConfig(&apos;./log.conf&apos;)\nlogger = logging.getLogger(&apos;root&apos;)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">4、[pdb]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683229901532c40b749184441dbd428d2e0f8aa50e000)   </div><div class=\"line\"></div><div class=\"line\">### 1.23、单元测试  </div><div class=\"line\"></div><div class=\"line\">### 1.24、文档测试（测试注释了的代码--python交互式代码）</div><div class=\"line\"></div><div class=\"line\">### 1.25、IO编程</div><div class=\"line\"></div><div class=\"line\">1、文件读写</div></pre></td></tr></table></figure>\n<pre><code>f = open(filename,r)\nf.read()\nf.close\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">为了保证会调用`close()`同时也是为了简单化，Python引入了`with`语法来帮助我们调用`close()`</div></pre></td></tr></table></figure>\n<pre><code>with open( filename ,r ) as f:\n        print f.read()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2、[操作文件和目录]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868321590543ff305fb9f9949f08d760883cc243812000)    </div><div class=\"line\"></div><div class=\"line\">3、序列化   </div><div class=\"line\"></div><div class=\"line\">+ python中序列化提供了两个模块来实现：`cPickle`和`pickle`(有`c`开头的就是用c语言实现的)[pickle参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683221577998e407bb309542d9b6a68d9276bc3dbe000)   </div><div class=\"line\"></div><div class=\"line\">+ json，`pickle`的问题在于序列化只能用在python中不能进行传递或者其它语言来解释，json刚好可以解决这个问题。</div><div class=\"line\"></div><div class=\"line\">| json | python |  </div><div class=\"line\">| ---- | ---- |     </div><div class=\"line\">| &#123; &#125; | dict |  </div><div class=\"line\">| [ ] | list |  </div><div class=\"line\">| &quot;string&quot; |  str 或者u unicode  |</div><div class=\"line\">| 123.4 | int 或者 float |  </div><div class=\"line\">| true/false | Ture /False |</div><div class=\"line\">| null | None |</div></pre></td></tr></table></figure>\n<pre><code>import josn    \nd = dict(name = &apos;Bob&apos;,age = 10,score = 88)    json.dumps(d)  #dump意为转储    \njson.loads(str)#转成dict python对象\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;font color = red&gt;**CAUTION:**&lt;/font&gt;json反序列化得到字符串对象都是unicode不是str。  </div><div class=\"line\"></div><div class=\"line\">+ class 序列化（json的进阶）</div></pre></td></tr></table></figure>\n<pre><code>json.dumps(s, \ndefault\n=lambda obj: obj.__dict__)#当class有__slot__属性时不能用 \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 1.26、[进程与线程]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868323401155ceb3db1e2044f80b974b469eb06cb43000)     </div><div class=\"line\"></div><div class=\"line\">1、进程</div><div class=\"line\"></div><div class=\"line\">+ Unix/Linux下可以调用`fork()`实现多进程</div><div class=\"line\"></div><div class=\"line\">+ 跨平台的多进程，可以使用multiprocessing  </div><div class=\"line\"></div><div class=\"line\">+ 进程间的通信可以使用Queue,Pipes  </div><div class=\"line\"></div><div class=\"line\">2、线程，python中有两个模块（thread,threading，后者是高级，我们一般使用高级）</div><div class=\"line\"></div><div class=\"line\">+ 线程与进程最大的不同是，同一个变量在进程中是各自有一份copy互不影响，而多线程中所有的线程共享进程的变量，是相互影响的。因此在多线程中我们使用Lock来保证变量的不相互影响</div></pre></td></tr></table></figure>\n<pre><code>import time, threading     \nbalance = 0\nlock = threading.Lock()\ndef change_it(n):        \n        global balance       \n         balance = balance + n    \n         balance = balance - n \n def run_thread(n):        \n        for i in range(100000):\n               lock.acquire()     #先获取锁                   try:                #try...finally保证不管什么情况下都会释放locK\n                   change_it(n)\n               finally:\n                   lock.release()  #释放锁\nif __name__ ==  __main__ :\n      t1 = threading.Thread(target=run_thread, args=(5,)) \n      t2 = threading.Thread(target=run_thread, args=(8,))   \n      t1.start()       \n      t2.start()       \n     t1.join()        \n    t2.join()      \n    print balance\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">+ 在多线程下每一个线程要保持自己的数据时，我们可使用ThreadLocal, **ThreadLocal最常用的地方就是为每一个线程绑定一个数据库链接，http请求，用户身份信息等**</div></pre></td></tr></table></figure>\n<pre><code>import threading    \nlocal_shcool = threading.local()  #每一个线程都可以写，且相互不影响，可以理解为一个以thread为key的dict\ndef pro_std():    \n    print hello,%s (in %s) %(loca_school.student,threading.current_thread().name)\ndef pro_thread(name):    \n    local_shcool.student = name    \n            pro_std()    \nt1 = threading.Thread(target = pro_thread,args = ( Alice ),name =  a )\nt2 = threading.Thread(target = pro_thread,args = ( Bob ),name =  B )\nt1.start()    \nt2.start()    \nt1.join()    \nt2.join()    \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.27、分布式编程   </div><div class=\"line\"></div><div class=\"line\">[参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832973658c780d8bfa4c6406f83b2b3097aed5df6000)   </div><div class=\"line\"></div><div class=\"line\">### 1.28、正则表达式</div><div class=\"line\"></div><div class=\"line\">### 1.29常用内嵌模块  </div><div class=\"line\"></div><div class=\"line\">1、collections</div><div class=\"line\"></div><div class=\"line\">2、base64:base64是一种任意二进制到文本字符串的编码方法。**关于base64的理解：将3个字符串转成4个字符串，3 \\* 8 = 4\\*6，因此叫base64**  </div><div class=\"line\"></div><div class=\"line\">3、hashlib摘要算法库，md5,SHA1。md5结果是128bit,SHA1结果是160bit</div><div class=\"line\"></div><div class=\"line\">```\t</div><div class=\"line\">\timport hashlib\t</div><div class=\"line\">\tmd5 = hashlib.md5()\t</div><div class=\"line\">\tmd5.update(  hello world )\t</div><div class=\"line\">\tmd5.update( hdhhd )\t</div><div class=\"line\">\tprint md5.hexdigest()</div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">SHA1与md5的调用 一样将上述代码改成SHA1即可  </div><div class=\"line\">## 2、python进阶  </div><div class=\"line\">### 2.1、Range与XRange的区别</div><div class=\"line\">在 Range的方法中，它会生成一个**list**的对象，但是在XRange中，它生成的却是一个**xrange的对象**，当返回的东西不是很大的时候，或者在一个 循环里，基本上都是从头查到底的情况下，这两个方法的效率差不多。但是，当返回的东西很大，或者循环中常常会被Break出来的话，还是建议使用 XRange，这样既省空间，又会提高效率。</div><div class=\"line\"></div><div class=\"line\">### 2.2、ArgumentParser处理数组传入</div></pre></td></tr></table></figure>\n<pre><code>ap = argparse.ArgumentParser()\nap.add_argument(&apos;-p&apos;,&apos;--plugins&apos;,required = True, nargs = &apos;+&apos;, help = &apos;the channel which you will test&apos;)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 3、python实战</div><div class=\"line\">### 3.1、[python制作gif]( http://python.jobbole.com/81185/)，然后可以在ppt导入    </div><div class=\"line\">### 3.2、Tkinter UI  </div><div class=\"line\">1、动态更新UI，使用`config`</div></pre></td></tr></table></figure>\n<pre><code>root = Tk()\nbtn = Button(root,text =&apos;test&apos;)\nbtn.pack()\nbtn.config(state = &apos;disabled&apos;）\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">关于布局有三种，pack,grid,place[参考]( http://www.tutorialspoint.com/python/tk_pack.htm)   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 4、opencv python   </div><div class=\"line\">### 4.1、反转黑白图片</div></pre></td></tr></table></figure>\n<pre><code>thresh = cv2.thrsehold(image,122,255,cv2.THRESH_BINARY_INV)[1]\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 4.2、[python进行条形码检测]( http://python.jobbole.com/81130/)    </div><div class=\"line\">### 4.3、cv2  crop图片</div></pre></td></tr></table></figure>\n<pre><code>img = image[y:y+h,x:x+w]\n</code></pre><p>```   </p>\n<h3 id=\"4-4、由文本生成图片，参考\"><a href=\"#4-4、由文本生成图片，参考\" class=\"headerlink\" title=\"4.4、由文本生成图片，参考\"></a>4.4、由文本生成图片，<a href=\"http://python.jobbole.com/81983/\" target=\"_blank\" rel=\"external\">参考</a></h3><h3 id=\"4-5、图片生成汉字库，关于怎么样将汉字切片可以参考\"><a href=\"#4-5、图片生成汉字库，关于怎么样将汉字切片可以参考\" class=\"headerlink\" title=\"4.5、图片生成汉字库，关于怎么样将汉字切片可以参考\"></a>4.5、图片生成汉字库，关于怎么样将汉字切片可以<a href=\"http://python.jobbole.com/81985/\" target=\"_blank\" rel=\"external\">参考</a></h3>","excerpt":"<h1 id=\"Python-学习\"><a href=\"#Python-学习\" class=\"headerlink\" title=\"Python 学习\"></a>Python 学习</h1>","more":"<h2 id=\"一、基础知识\"><a href=\"#一、基础知识\" class=\"headerlink\" title=\"一、基础知识\"></a>一、基础知识</h2><h3 id=\"1-0、逻辑运算（补充）\"><a href=\"#1-0、逻辑运算（补充）\" class=\"headerlink\" title=\"1.0、逻辑运算（补充）\"></a>1.0、逻辑运算（补充）</h3><table>\n<thead>\n<tr>\n<th>逻辑运算</th>\n<th>python 表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>与</td>\n<td>and</td>\n</tr>\n<tr>\n<td>或</td>\n<td>or</td>\n</tr>\n<tr>\n<td>非</td>\n<td>not</td>\n</tr>\n<tr>\n<td>异或</td>\n<td>^</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-1、-关于list与tuple-元组-数组\"><a href=\"#1-1、-关于list与tuple-元组-数组\" class=\"headerlink\" title=\"1.1、 关于list与tuple(元组), 数组\"></a>1.1、 关于list与tuple(元组),<font color = red> <em>数组</em></font></h3><p>1、<code>list</code> 是可变，<code>tuple</code>是不可变，可以用<code>tuple</code>的地方尽量用<code>tuple</code>；  </p>\n<p>2、<code>list</code>利用“[]”表示，<code>tuple</code>利用”()”表示<br>3、数组python用numpy来做的：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import numpy</div><div class=\"line\">matrix = numpy.zeros(shape=(5,2))#创建数组</div><div class=\"line\">print matrix[i,j]#获取元素</div></pre></td></tr></table></figure>\n<h3 id=\"1-2、关于dict-set\"><a href=\"#1-2、关于dict-set\" class=\"headerlink\" title=\"1.2、关于dict,set\"></a>1.2、关于dict,set</h3><p>参考c++map,set</p>\n<p><strong>CAUTION:</strong> Python的集合(set)和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)等数学运算.由于集合是无序的,所以，sets 不支持 索引, 分片, 或其它类序列（sequence-like）的操作。Dict的key必须是不可变的</p>\n<h3 id=\"1-3、关于python的可变参数与关键字参数\"><a href=\"#1-3、关于python的可变参数与关键字参数\" class=\"headerlink\" title=\"1.3、关于python的可变参数与关键字参数\"></a>1.3、关于python的可变参数与关键字参数</h3><p>1、可变参数就是传入的参数的个数是可变定义方式为<code>def func(*args)</code>。可变参数在函数调用时自动组装为一tuple。</p>\n<p>2、关键字参数可以传入零个或多个含参数名的参数也就是键值对，定义方式为<code>def func(**kv)</code>。关键字参数在函数调用时组装成一个dict。</p>\n<p>3、list,tuple可以在变量前面添加<code>*</code>来传入到参数为可变参数的函数，dict同样也可传入到参数为关键字参数的函数。</p>\n<p>4、由于3，对于任意函数我们都可以通过<code>def func(*args,**kv)</code>来调用它，不管他是怎么样定义的。</p>\n<p>5、python函数的参数顺序问题：必须函数，默认参数，可变参数，关键字参数  </p>\n<h3 id=\"1-4、Python所谓的高级我切片与matlab的取第几行几列类似\"><a href=\"#1-4、Python所谓的高级我切片与matlab的取第几行几列类似\" class=\"headerlink\" title=\"1.4、Python所谓的高级我切片与matlab的取第几行几列类似\"></a>1.4、Python所谓的高级我切片与matlab的取第几行几列类似</h3><h3 id=\"1-5、迭代使用for-in或者for-value-in-d-iteatervalues-同时也可以用for-k-v-in-d-iteritems\"><a href=\"#1-5、迭代使用for-in或者for-value-in-d-iteatervalues-同时也可以用for-k-v-in-d-iteritems\" class=\"headerlink\" title=\"1.5、迭代使用for ... in或者for value in d.iteatervalues()同时也可以用for k,v in d.iteritems()\"></a>1.5、迭代使用<code>for ... in</code>或者<code>for value in d.iteatervalues()</code>同时也可以用<code>for k,v in d.iteritems()</code></h3><p>例如：   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">d  = &#123; a :1, b :2&#125;\t</div><div class=\"line\">for key in d:\t</div><div class=\"line\">print key</div></pre></td></tr></table></figure>\n<p>1、但是要使用迭代一个对象，那么这个对象要是<strong>可迭代的</strong>，<font color = red>方法：可以通过collections 模块的iterable进行判断</font>      </p>\n<h3 id=\"1-6、生成器-Generator\"><a href=\"#1-6、生成器-Generator\" class=\"headerlink\" title=\"1.6、生成器(Generator)\"></a>1.6、生成器(Generator)</h3><p>由于通过列表生成器生成一个列表时，受到内存的限制，列表的容量是有限的。所以如果可以按照一种算法进行推算出来，那就不必创建完整的list从而可以节省大量空间。创建generator的方法有多种：  </p>\n<p>第一种： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">l = [ x*x for x in range(1,11) ]\t</div><div class=\"line\">g = (x*x for x in range(1,11))   # g就是一个generator，与列表生成器不同的是[ ]与（ ）的问题  </div><div class=\"line\">g.next()  # generator保存的是算法每次调用next()实际是在计算下一个元素，直到计算到最后的元素，当没有元素时就会抛出StopIteration的错误</div><div class=\"line\">for n in g: # 由于不断调用next（）函数并不是很方便，由于generator是可迭代对象，因此正确的使用方法是使用迭代</div><div class=\"line\">print n</div></pre></td></tr></table></figure>\n<p>第二种：<br>在函数定义中如果包含yield关键字，那么这个函数就是一个generator      </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def fib(max):\t</div><div class=\"line\">\t    n,a,b = 0,0,1\t</div><div class=\"line\">\t    while n&lt;max:\t</div><div class=\"line\">\t        yield b      # yield关键字</div><div class=\"line\">\t        a,b =b ,a+b\t</div><div class=\"line\">\t        n = n+1</div></pre></td></tr></table></figure>\n<h3 id=\"1-7、python高函数\"><a href=\"#1-7、python高函数\" class=\"headerlink\" title=\"1.7、python高函数\"></a>1.7、python高函数</h3><p>所谓的高阶函数就是一个函数接收函数作为参数</p>\n<h3 id=\"1-8、map-reduce-filter\"><a href=\"#1-8、map-reduce-filter\" class=\"headerlink\" title=\"1.8、map/reduce/filter\"></a>1.8、map/reduce/filter</h3><p><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf\">关于MapReduce文章</a>    </p>\n<ul>\n<li>map/reduce demo  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">def str2int(s):\t</div><div class=\"line\">\t    def fn(x,y):\t</div><div class=\"line\">\t        return x*10+y\t</div><div class=\"line\">\t    def char2num (s) :\t</div><div class=\"line\">\t        return &#123;  0  : 0 ,  1  : 1 ,  2  : 2 ,  3  : 3 ,  4  : 4 ,  5  : 5 ,  6  : 6 ,  7  : 7 ,  8  : 8 ,  9  : 9 &#125;[s]</div><div class=\"line\">\t    return reduce(fn,map(char2num,s))</div></pre></td></tr></table></figure>\n<font color=red><strong>注意map,reduce都接收一个函数与一个list，因此第5行代码就好理解了</strong>   </font>    \n\n<ul>\n<li>filter 与map/reduce一样都 是高阶函数都是接收一个函数与list变量,filter是根据传入函数作用于每一个元素返回true/false来决定这个元素是否保留</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tdef is_odd(n):\t</div><div class=\"line\">\t    return n%2 ==1</div><div class=\"line\">\t   \tfilter(is_odd,[1,2,3,4,5])</div><div class=\"line\">```   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 1.9、**funciton.partial偏函数**，把一个函数的某些参数给固定住，返回一个新函数，那么调用 这个函数就会简单一些。当一个函数的参数个数太多需要简化的时候可以使用functools.partial创建一个偏函数。</div></pre></td></tr></table></figure>\n<pre><code>import functools    \nint2 = functools.partial(int,base = 2) #int2就是一个新函数只有一个参数\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.9.1 `@`语法</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">开门见山，直上代码</div></pre></td></tr></table></figure>\n<pre><code>def log(func):    \n        def wrapper(*args,**kw):    \n            print  call %s %func.__name__\n            return func(*args,**kw)    \nreturn wrapper\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`log`函数接收一个函数作为参数，然后返回一个函数，这就叫做decorator。那么怎么用这个decorator呢？代码直上：</div></pre></td></tr></table></figure>\n<pre><code>@log    \ndef now():    \n    print  sdfdsfds \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`@`语法相当于：`now = log(now)`     </div><div class=\"line\">  </div><div class=\"line\">### 1.10、python用模块（module）来组织工程</div><div class=\"line\"></div><div class=\"line\">1、使用模块可以避免函数与变量名的冲突。一个.py文件 就是一个模块。</div><div class=\"line\"></div><div class=\"line\">2、为了避免模块名的冲突python引入package，本质就是按目录来组织模块</div><div class=\"line\"></div><div class=\"line\">3、package目录下一定要有一__init__.py模块，否则认为普通目录  </div><div class=\"line\"></div><div class=\"line\">4、注释也可采用</div></pre></td></tr></table></figure>\n<pre><code>‘’‘\n\n注释\n\n’‘’\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.11、关于`if __name__== main:`</div><div class=\"line\"></div><div class=\"line\">当我们用命令行运行模块的时候，Python解释器就会将一个特殊变量`__name__`置为`__main__`，而在其它地方导入该模块这个判断就会失败，也就是说这条语句主要是便于我们使用命令行。  </div><div class=\"line\"></div><div class=\"line\">### 1.12、作用域</div><div class=\"line\"></div><div class=\"line\">private访问控制在python里通过`_`或者`__`前缀来实现。这里所说的private只是一种编程习惯，因为python并没有private的控制访问。</div><div class=\"line\"></div><div class=\"line\">### 1.13、python面向对象编程(Object Oriented Programming,OOP)</div><div class=\"line\"></div><div class=\"line\">话不多说直接上demo</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):                                 #表示Student从object继承 \n        def __init__(self,name,score):            #__init__类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数\n\n                self.name = name    \n                self.score = score    \n                super(Student,self).__init__()    #表示调用父类方法\n            def print_score(self):    \n                print  %s,%s %(self.name,self.score)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、`__init__`类于构造函数，且第一个参数永远是self，表示创建实例本身。而且实例化对象时一定要传入与__init__参数对应的参数。    </div><div class=\"line\">2、成员函数与普通函数不一样的地方就是第一个参数永远是self     </div><div class=\"line\">3、private访问控制权限就是在变量前面添加`__`前缀。`_`在类中视为private但是其实是可以访问的，只是按约定视为private.    </div><div class=\"line\">4、private变量其实也是可以访问的，可以通过`_类名_private变量`如`_Student_name`     </div><div class=\"line\">5、  super(className,self).function()      父类方法调用&lt;font color = red&gt; 如果是多继承且多个父类有同样的方法则按顺序调用&lt;/font&gt;</div><div class=\"line\"></div><div class=\"line\">### 1.14、关于python的多态</div><div class=\"line\"></div><div class=\"line\">由于python里不需要事先声明变量的类型，因此多态实现起来就简单得多：</div></pre></td></tr></table></figure>\n<pre><code>def run(animal):    \n    animal.run()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">代码中只要传入的参数有run这个方法就可以，&lt;font color = red&gt;**不管是不是animal还是子类或者不是子类**&lt;/font&gt;，这样子就与c++里的多态一样。其实本质上是由于python本来就是动态语言。  </div><div class=\"line\"></div><div class=\"line\">### 1.15、获取对象信息</div><div class=\"line\"></div><div class=\"line\">1、type可以判断基本类型的所属类型</div></pre></td></tr></table></figure>\n<pre><code>import types    \ntype( ssdfdf )\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2、isinstance可以判断基本数据类型还可以判断class类</div><div class=\"line\"></div><div class=\"line\">3、dir可以获取对象的所有属性和方法</div><div class=\"line\"></div><div class=\"line\">4、getattr(),setattr(),hasattr()可以操作一个对象的属性，顾名思义  </div><div class=\"line\"></div><div class=\"line\">### 1.16、python动态绑定方法</div></pre></td></tr></table></figure>\n<pre><code>def set_age(self,age):    \n        self.age = age        \nfrom types import MethodType    \ns.set_age = MethodType(set_age,s,Student)          #给实例新增方法\nStudent.set_age = MethodType(set_age,None,Student)    #给类新增方法\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、&lt;font color = red&gt;**`__slot__`**&lt;/font&gt;关键字</div><div class=\"line\"></div><div class=\"line\">如果想对class限制只允许给类的实例添加属性时，我们可以使用`__slot__`，但是不遗传</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):    \n        __slot__ = ( name , age )  #用tuple定义允许修改的属性名称\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">###1.17、`@property`关键字</div><div class=\"line\"></div><div class=\"line\">`@property`负责将一个方法变成属性调用，而与一个属性不同的是属性并没有检查是否合法，而方法是可以进行检查的。</div></pre></td></tr></table></figure>\n<pre><code>class Student(object):    \n        @property    \n        def score(self):    \n                return self._score    \n        @score.setter    \n        def score(self,value):    \n                if():\n                        .....#参数检查\n                self._score = value\n\n&gt;&gt;&gt;s = Student()    \n&gt;&gt;&gt;s.score = 10 #实际上是调用的s.set_score()\n&gt;&gt;&gt;s.score #实际上调用 的是s.get_score()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">`@property`把一个方法变成属性，`@xxx.setter`把一个方法变成属性赋值，与OC的property有一点相似</div><div class=\"line\"></div><div class=\"line\">### 1.18、多重继承</div><div class=\"line\"></div><div class=\"line\">### 1.19、定制类</div><div class=\"line\"></div><div class=\"line\">### 1.20、元类</div><div class=\"line\"></div><div class=\"line\">1、type动态创建一个对象</div></pre></td></tr></table></figure>\n<pre><code>hello = type( Hello ,(object,),dict(hello = fn))\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">type接收三个参数：</div><div class=\"line\"></div><div class=\"line\">+ class名字</div><div class=\"line\"></div><div class=\"line\">+ 参数2 为父类，是一个tuple（object,）</div><div class=\"line\"></div><div class=\"line\">+ dict(hello = fn),绑定函数到类的方法</div><div class=\"line\"></div><div class=\"line\">   </div><div class=\"line\"></div><div class=\"line\">2、metaclass元类，（OC中也有这个概念）   </div><div class=\"line\"></div><div class=\"line\">### 1.21、异常捕获`try:....except...finally...`</div></pre></td></tr></table></figure>\n<pre><code>try:    \n    print  try....     \n    r = 10/0    \n    print  reuslt: ,r    \nexcept ZeroDivisionError ,e:        #还可以多级捕获\n    print  error: ,e    \nfinally:    \n    print  finally... \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、可以通过`raise`抛出异常，`raise`后面不带参数则将错误原样抛出，同样`raise`也可以修改抛出错误的类型  </div><div class=\"line\"></div><div class=\"line\">### 1.22、调试</div><div class=\"line\"></div><div class=\"line\">1、print打印信息</div><div class=\"line\"></div><div class=\"line\">2、asser断言</div><div class=\"line\"></div><div class=\"line\">3、logging推荐，可以定义log级别：debug,info,waning,error ,可以指定输出文件`logging.config.fileConfig(filename)`,[filename规则](https://docs.python.org/2/library/logging.config.html#logging-config-fileformat)  ，给一个log.conf</div></pre></td></tr></table></figure>\n<pre><code>[loggers]\nkeys=root\n\n[handlers]\nkeys=consoleHandler,fileHandler\n\n[formatters]\nkeys=simpleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(sys.stdout,)\n\n[handler_fileHandler]\nclass=logging.handlers.TimedRotatingFileHandler\nlevel=DEBUG\nformatter=simpleFormatter\nargs=(&apos;./log/sample.log&apos;,&apos;D&apos;,1,14)\n#args=(&apos;/data/iTOP_ROOT/dev/log/admin/pack/sample.log&apos;,&apos;D&apos;,1,14)\n\n[formatter_simpleFormatter]\nformat=[%(asctime)s][pid %(process)d][%(levelname)s][%(filename)s:%(lineno)d]%(message)s\ndatefmt=\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">使用方式：</div></pre></td></tr></table></figure>\n<pre><code>logging.config.fileConfig(&apos;./log.conf&apos;)\nlogger = logging.getLogger(&apos;root&apos;)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">4、[pdb]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683229901532c40b749184441dbd428d2e0f8aa50e000)   </div><div class=\"line\"></div><div class=\"line\">### 1.23、单元测试  </div><div class=\"line\"></div><div class=\"line\">### 1.24、文档测试（测试注释了的代码--python交互式代码）</div><div class=\"line\"></div><div class=\"line\">### 1.25、IO编程</div><div class=\"line\"></div><div class=\"line\">1、文件读写</div></pre></td></tr></table></figure>\n<pre><code>f = open(filename,r)\nf.read()\nf.close\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">为了保证会调用`close()`同时也是为了简单化，Python引入了`with`语法来帮助我们调用`close()`</div></pre></td></tr></table></figure>\n<pre><code>with open( filename ,r ) as f:\n        print f.read()\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2、[操作文件和目录]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868321590543ff305fb9f9949f08d760883cc243812000)    </div><div class=\"line\"></div><div class=\"line\">3、序列化   </div><div class=\"line\"></div><div class=\"line\">+ python中序列化提供了两个模块来实现：`cPickle`和`pickle`(有`c`开头的就是用c语言实现的)[pickle参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683221577998e407bb309542d9b6a68d9276bc3dbe000)   </div><div class=\"line\"></div><div class=\"line\">+ json，`pickle`的问题在于序列化只能用在python中不能进行传递或者其它语言来解释，json刚好可以解决这个问题。</div><div class=\"line\"></div><div class=\"line\">| json | python |  </div><div class=\"line\">| ---- | ---- |     </div><div class=\"line\">| &#123; &#125; | dict |  </div><div class=\"line\">| [ ] | list |  </div><div class=\"line\">| &quot;string&quot; |  str 或者u unicode  |</div><div class=\"line\">| 123.4 | int 或者 float |  </div><div class=\"line\">| true/false | Ture /False |</div><div class=\"line\">| null | None |</div></pre></td></tr></table></figure>\n<pre><code>import josn    \nd = dict(name = &apos;Bob&apos;,age = 10,score = 88)    json.dumps(d)  #dump意为转储    \njson.loads(str)#转成dict python对象\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;font color = red&gt;**CAUTION:**&lt;/font&gt;json反序列化得到字符串对象都是unicode不是str。  </div><div class=\"line\"></div><div class=\"line\">+ class 序列化（json的进阶）</div></pre></td></tr></table></figure>\n<pre><code>json.dumps(s, \ndefault\n=lambda obj: obj.__dict__)#当class有__slot__属性时不能用 \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### 1.26、[进程与线程]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868323401155ceb3db1e2044f80b974b469eb06cb43000)     </div><div class=\"line\"></div><div class=\"line\">1、进程</div><div class=\"line\"></div><div class=\"line\">+ Unix/Linux下可以调用`fork()`实现多进程</div><div class=\"line\"></div><div class=\"line\">+ 跨平台的多进程，可以使用multiprocessing  </div><div class=\"line\"></div><div class=\"line\">+ 进程间的通信可以使用Queue,Pipes  </div><div class=\"line\"></div><div class=\"line\">2、线程，python中有两个模块（thread,threading，后者是高级，我们一般使用高级）</div><div class=\"line\"></div><div class=\"line\">+ 线程与进程最大的不同是，同一个变量在进程中是各自有一份copy互不影响，而多线程中所有的线程共享进程的变量，是相互影响的。因此在多线程中我们使用Lock来保证变量的不相互影响</div></pre></td></tr></table></figure>\n<pre><code>import time, threading     \nbalance = 0\nlock = threading.Lock()\ndef change_it(n):        \n        global balance       \n         balance = balance + n    \n         balance = balance - n \n def run_thread(n):        \n        for i in range(100000):\n               lock.acquire()     #先获取锁                   try:                #try...finally保证不管什么情况下都会释放locK\n                   change_it(n)\n               finally:\n                   lock.release()  #释放锁\nif __name__ ==  __main__ :\n      t1 = threading.Thread(target=run_thread, args=(5,)) \n      t2 = threading.Thread(target=run_thread, args=(8,))   \n      t1.start()       \n      t2.start()       \n     t1.join()        \n    t2.join()      \n    print balance\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">+ 在多线程下每一个线程要保持自己的数据时，我们可使用ThreadLocal, **ThreadLocal最常用的地方就是为每一个线程绑定一个数据库链接，http请求，用户身份信息等**</div></pre></td></tr></table></figure>\n<pre><code>import threading    \nlocal_shcool = threading.local()  #每一个线程都可以写，且相互不影响，可以理解为一个以thread为key的dict\ndef pro_std():    \n    print hello,%s (in %s) %(loca_school.student,threading.current_thread().name)\ndef pro_thread(name):    \n    local_shcool.student = name    \n            pro_std()    \nt1 = threading.Thread(target = pro_thread,args = ( Alice ),name =  a )\nt2 = threading.Thread(target = pro_thread,args = ( Bob ),name =  B )\nt1.start()    \nt2.start()    \nt1.join()    \nt2.join()    \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 1.27、分布式编程   </div><div class=\"line\"></div><div class=\"line\">[参考]( http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832973658c780d8bfa4c6406f83b2b3097aed5df6000)   </div><div class=\"line\"></div><div class=\"line\">### 1.28、正则表达式</div><div class=\"line\"></div><div class=\"line\">### 1.29常用内嵌模块  </div><div class=\"line\"></div><div class=\"line\">1、collections</div><div class=\"line\"></div><div class=\"line\">2、base64:base64是一种任意二进制到文本字符串的编码方法。**关于base64的理解：将3个字符串转成4个字符串，3 \\* 8 = 4\\*6，因此叫base64**  </div><div class=\"line\"></div><div class=\"line\">3、hashlib摘要算法库，md5,SHA1。md5结果是128bit,SHA1结果是160bit</div><div class=\"line\"></div><div class=\"line\">```\t</div><div class=\"line\">\timport hashlib\t</div><div class=\"line\">\tmd5 = hashlib.md5()\t</div><div class=\"line\">\tmd5.update(  hello world )\t</div><div class=\"line\">\tmd5.update( hdhhd )\t</div><div class=\"line\">\tprint md5.hexdigest()</div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">SHA1与md5的调用 一样将上述代码改成SHA1即可  </div><div class=\"line\">## 2、python进阶  </div><div class=\"line\">### 2.1、Range与XRange的区别</div><div class=\"line\">在 Range的方法中，它会生成一个**list**的对象，但是在XRange中，它生成的却是一个**xrange的对象**，当返回的东西不是很大的时候，或者在一个 循环里，基本上都是从头查到底的情况下，这两个方法的效率差不多。但是，当返回的东西很大，或者循环中常常会被Break出来的话，还是建议使用 XRange，这样既省空间，又会提高效率。</div><div class=\"line\"></div><div class=\"line\">### 2.2、ArgumentParser处理数组传入</div></pre></td></tr></table></figure>\n<pre><code>ap = argparse.ArgumentParser()\nap.add_argument(&apos;-p&apos;,&apos;--plugins&apos;,required = True, nargs = &apos;+&apos;, help = &apos;the channel which you will test&apos;)\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 3、python实战</div><div class=\"line\">### 3.1、[python制作gif]( http://python.jobbole.com/81185/)，然后可以在ppt导入    </div><div class=\"line\">### 3.2、Tkinter UI  </div><div class=\"line\">1、动态更新UI，使用`config`</div></pre></td></tr></table></figure>\n<pre><code>root = Tk()\nbtn = Button(root,text =&apos;test&apos;)\nbtn.pack()\nbtn.config(state = &apos;disabled&apos;）\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">关于布局有三种，pack,grid,place[参考]( http://www.tutorialspoint.com/python/tk_pack.htm)   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">## 4、opencv python   </div><div class=\"line\">### 4.1、反转黑白图片</div></pre></td></tr></table></figure>\n<pre><code>thresh = cv2.thrsehold(image,122,255,cv2.THRESH_BINARY_INV)[1]\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 4.2、[python进行条形码检测]( http://python.jobbole.com/81130/)    </div><div class=\"line\">### 4.3、cv2  crop图片</div></pre></td></tr></table></figure>\n<pre><code>img = image[y:y+h,x:x+w]\n</code></pre><p>```   </p>\n<h3 id=\"4-4、由文本生成图片，参考\"><a href=\"#4-4、由文本生成图片，参考\" class=\"headerlink\" title=\"4.4、由文本生成图片，参考\"></a>4.4、由文本生成图片，<a href=\"http://python.jobbole.com/81983/\">参考</a></h3><h3 id=\"4-5、图片生成汉字库，关于怎么样将汉字切片可以参考\"><a href=\"#4-5、图片生成汉字库，关于怎么样将汉字切片可以参考\" class=\"headerlink\" title=\"4.5、图片生成汉字库，关于怎么样将汉字切片可以参考\"></a>4.5、图片生成汉字库，关于怎么样将汉字切片可以<a href=\"http://python.jobbole.com/81985/\">参考</a></h3>"},{"title":"Hello World","_content":"Welcome to my blog, this is the begining.","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to my blog, this is the begining.","slug":"hello-world","published":1,"date":"2017-03-20T01:25:20.000Z","updated":"2017-03-20T01:25:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wrc0006sjvembinu964","content":"<p>Welcome to my blog, this is the begining.</p>\n","excerpt":"","more":"<p>Welcome to my blog, this is the begining.</p>\n"},{"title":"hexo使用手册","date":"2017-03-19T03:04:18.000Z","_content":"\n> Hexo 的日常使用，包括增加，修改以及多设备操作\n\n<!--More-->\n\n## 一、关于日常笔记（添加新，修改等）：\n+ 依次执行git pull, git add .、git commit -m \"...\"、git push origin hexo指令将改动推送到GitHub；\n+ 然后才执行hexo g -d发布网站到master分支上 \n+ master分支不用理会，hexo管理   \n\n## 二、其它设备上使用下列步骤：\n+ 使用git clone -b hexo https://github.com/xxxx/xxxx.git ；\n+ 在本地库中执行：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init）\n\n## 三、Git https 转 ssh\n### git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：    \n+ 通过`git remote -v`查看当前模式\n+ 通过`git remote set-url git@github.com:xxxx/xxx.git`便可转成ssh","source":"_posts/hexo使用手册.md","raw":"---\ntitle: hexo使用手册\ndate: 2017-03-19 11:04:18\ncategories: Hexo\ntags: 使用手册\n---\n\n> Hexo 的日常使用，包括增加，修改以及多设备操作\n\n<!--More-->\n\n## 一、关于日常笔记（添加新，修改等）：\n+ 依次执行git pull, git add .、git commit -m \"...\"、git push origin hexo指令将改动推送到GitHub；\n+ 然后才执行hexo g -d发布网站到master分支上 \n+ master分支不用理会，hexo管理   \n\n## 二、其它设备上使用下列步骤：\n+ 使用git clone -b hexo https://github.com/xxxx/xxxx.git ；\n+ 在本地库中执行：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init）\n\n## 三、Git https 转 ssh\n### git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：    \n+ 通过`git remote -v`查看当前模式\n+ 通过`git remote set-url git@github.com:xxxx/xxx.git`便可转成ssh","slug":"hexo使用手册","published":1,"updated":"2017-03-20T01:25:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wre0007sjvefljapevy","content":"<blockquote>\n<p>Hexo 的日常使用，包括增加，修改以及多设备操作</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"一、关于日常笔记（添加新，修改等）：\"><a href=\"#一、关于日常笔记（添加新，修改等）：\" class=\"headerlink\" title=\"一、关于日常笔记（添加新，修改等）：\"></a>一、关于日常笔记（添加新，修改等）：</h2><ul>\n<li>依次执行git pull, git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub；</li>\n<li>然后才执行hexo g -d发布网站到master分支上 </li>\n<li>master分支不用理会，hexo管理   </li>\n</ul>\n<h2 id=\"二、其它设备上使用下列步骤：\"><a href=\"#二、其它设备上使用下列步骤：\" class=\"headerlink\" title=\"二、其它设备上使用下列步骤：\"></a>二、其它设备上使用下列步骤：</h2><ul>\n<li>使用git clone -b hexo <a href=\"https://github.com/xxxx/xxxx.git\" target=\"_blank\" rel=\"external\">https://github.com/xxxx/xxxx.git</a> ；</li>\n<li>在本地库中执行：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init）</li>\n</ul>\n<h2 id=\"三、Git-https-转-ssh\"><a href=\"#三、Git-https-转-ssh\" class=\"headerlink\" title=\"三、Git https 转 ssh\"></a>三、Git https 转 ssh</h2><h3 id=\"git-clone-时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\"><a href=\"#git-clone-时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\" class=\"headerlink\" title=\"git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\"></a>git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：</h3><ul>\n<li>通过<code>git remote -v</code>查看当前模式</li>\n<li>通过<code>git remote set-url git@github.com:xxxx/xxx.git</code>便可转成ssh</li>\n</ul>\n","excerpt":"<blockquote>\n<p>Hexo 的日常使用，包括增加，修改以及多设备操作</p>\n</blockquote>","more":"<h2 id=\"一、关于日常笔记（添加新，修改等）：\"><a href=\"#一、关于日常笔记（添加新，修改等）：\" class=\"headerlink\" title=\"一、关于日常笔记（添加新，修改等）：\"></a>一、关于日常笔记（添加新，修改等）：</h2><ul>\n<li>依次执行git pull, git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub；</li>\n<li>然后才执行hexo g -d发布网站到master分支上 </li>\n<li>master分支不用理会，hexo管理   </li>\n</ul>\n<h2 id=\"二、其它设备上使用下列步骤：\"><a href=\"#二、其它设备上使用下列步骤：\" class=\"headerlink\" title=\"二、其它设备上使用下列步骤：\"></a>二、其它设备上使用下列步骤：</h2><ul>\n<li>使用git clone -b hexo <a href=\"https://github.com/xxxx/xxxx.git\">https://github.com/xxxx/xxxx.git</a> ；</li>\n<li>在本地库中执行：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init）</li>\n</ul>\n<h2 id=\"三、Git-https-转-ssh\"><a href=\"#三、Git-https-转-ssh\" class=\"headerlink\" title=\"三、Git https 转 ssh\"></a>三、Git https 转 ssh</h2><h3 id=\"git-clone-时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\"><a href=\"#git-clone-时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\" class=\"headerlink\" title=\"git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：\"></a>git clone 时一般有两种方式https和ssh，但是https模式下每一次push都需要输入用户名与密码，而ssh方式下只要设置好ssh后不需要每一次都输入用户名与密码。那么如果一个https如何才能转成ssh呢，那就按以下步骤：</h3><ul>\n<li>通过<code>git remote -v</code>查看当前模式</li>\n<li>通过<code>git remote set-url git@github.com:xxxx/xxx.git</code>便可转成ssh</li>\n</ul>"},{"title":"iOS Dev","date":"2017-03-18T03:08:00.000Z","_content":"\n> iOS 学习笔记\n\n<!--More-->\n## 一、iOS基础知识\n### 1、语法\n\n1、类方法里是不可以调用普通方法的。\n\n2、`extension`与`catogry`的区别就是括号中有没有名字。另外`catogry`只可以增加方法不能增加属性，`extension`是可以增加属性的   \n\n3、`self`的赋值一定要在`initxxx`系列函数里调用，不能在别的函数里调用，`initialxxx`都不行\n\n\n### 2、关于在一个工程中添加自定义framework\n\n1、添加方式：File->New->Target->Cocoa Touch Framework\n2、真机测试时可会出现dyld:Library no loaded:....   \n**解决方法**：在app对应的Target->General->Embedded Binaries 添加自定义framwork\n\n### 3、Framework 命令行编译\n\n利用xcode tools[参考](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html),命令如下：\n\n> xcodebuild clean build -project /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/IMSDK.xcodeproj \n-target IMSDKCoreKit -configuration Release  -xcconfig /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/Demo/Configurations/IMSDKGNU++98.xcconfig -sdk iphoneos9.1\n\n\n### 4.[KVO]( https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html)     \n### 5.[ios https](http://io.diveinedu.com/2016/01/09/iOS%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS.html)\n### 6.runloop     \nrunloop只有在开启第二个线程的时候才考虑使用runloop，而且也并非所有的线程需要runloop\n+ 使用runloop的情况    \n  + use ports or custom input sources to communicate with other threads\n  + use timers on the thread\n  + use any of the `performSelector...`\n  + keep the thread around of perform periodic tasks     \n  \n+ performselector在后台执行时，必须开启一个runloop，否则调用不了     \n+ runLoop有两套API，NSRunloop,CFRunLoopRef     \n+ runLoop在获取时，就是创建\n+ 一个runloop有两个CFRunloopSource,source0:处理UIEvent，CFSocket,source1:mach port,CFMachPort,CFMessagePort;一种mode:default,tracking,common     \n\n### 7.copy与retain    \n+ copy是指拷贝内容    \n+ retain是指拷贝指针     \n+ copy需要对象遵守NSCopying协议的    \n+     \n\n### 8.关于xcode查看汇编的方法   \n+ xcode 7.x: Debug ==> Debug Workflow ==> Show Disassembly when Debugging     \n+ xocde 7.x之前： Product ==> Debug Workflow ==> Show Disassembly when Debugging    \n\n### 9.oc严格单例\n\n创建对象的步骤分为申请内存(alloc)、初始化(init)这两个步骤，我们要确保对象的唯一性，因此在第一步这个阶段我们就要拦截它。当我们调用alloc方法时，oc内部会调用allocWithZone这个方法来申请内存，我们覆写这个方法，然后在这个方法中调用shareInstance方法返回单例对象，这样就可以达到我们的目的。拷贝对象也是同样的原理，覆写copyWithZone方法，然后在这个方法中调用shareInstance方法返回单例对象。看代码吧：\n\n```\n\n\t#import \"Singleton.h\"  \n\t  \n\t@implementation Singleton  \n\t  \n\tstatic Singleton* _instance = nil;  \n\t  \n\t+(instancetype) shareInstance  \n\t{  \n\t    static dispatch_once_t onceToken ;  \n\t    dispatch_once(&onceToken, ^{  \n\t        _instance = [[super allocWithZone:NULL] init] ;  \n\t    }) ;  \n\t      \n\t    return _instance ;  \n\t}  \n\t  \n\t+(id) allocWithZone:(struct _NSZone *)zone  \n\t{  \n\t    return [Singleton shareInstance] ;  \n\t}  \n\t  \n\t-(id) copyWithZone:(struct _NSZone *)zone  \n\t{  \n\t    return [Singleton shareInstance] ;  \n\t}  \n\t  \n\t@end  \n```\n\n## 二、关于certificates 和provisioning proflies\n\n1、certificates：key(private key)\n\n2、provisioning profiles:(public key)\n\n + appid(bundle identifier) \n\n\n + devices(uuid)\n\n\n + certificates(private key)  \n\n3、.p12是证书导出保存的形式     \n4、wwdr证书失效会导致自己证书无效\n\n\n## 三、关于Clang 与LLVM  \n\n\nClang 是一个 C++ 编写、基于 LLVM、发布于 LLVM BSD 许可证下的/C++/Objective C/Objective C++ 编译器。LLVM 是 Low Level Virtual Machine。具体介绍参考[clang and llvm]( http://objccn.io/issue-6-2/)\n\n+ 命令clang -E 是用于宏定义展开  \n\n   \n\n## 四、反馈系统UI设计问题：\n\n\n\n\n\n1、toolbar的设计问题，当用storyboard进行布局的时候要做到适配效果子在UIbarbuttonItem之间加入flexispace才能做到适配。\n\n2、关于storyboard initialViewcontrollerwithIdentiy的问题，当view还没出现的时生成的对象的成员都会是空的，只有到显示的时候才会出现。解决要对其进行参数传递的时候要采用property方法或者利用dispatch_after方式来做\n\n3、关于ipad版本浮动窗口形式的问题。当在ipad版本下设置Modalpresentationstyle就可以达到这种效果\n4、关于storyboard的问题。一个app中可以有多个storyboard，通过instantiateviewcontrollerwithidentiter方式 来进行实例化。要注意的是storyboard要放到 mainbundle目录下\n5、消除返回按钮上的文字，利用self.naviagtionitem.backbuttonitem = [[uibarbuttom alloc ]initwithtitle:@\"\"] style:\n\ntarget:action];[参见]( http://www.cnblogs.com/ygm900/p/3659619.html )  \n\n## 五、关于isKindOfClass与isMemberOfClass的区别：\n\n1、isKindOfClass，是判断一个对象是属于哪个类~~ 型，一直追溯到父类~~ 。或者子类的实例\n\n2、isMemberClass，是判断一个对象属于哪个类~~ 型，不追溯到父类!~~ 。   \n## 六、Core Data编程\n1、core data 与sql的一些对应关系：\n\n| 功能 | sql |core data| \n| -- | -- |--|  \n|表头|表结构,实体，entity|NSEntityDescription|   \n|表中的一行数据|记录|NSManagedObject| \n|查询|查询,select ...|NSFetchRequest|   \n|持久化|表存储,。。。|NSPersistentStoreCoordinator|   \n|数据库的设计，也就是.xcodemodel文件|数据库模型,。。。|NSManagedObjectModel|   \n|操作上下文|数据库操作|NSManagedObjectContext|  \n[更详细的底层操作](http://objccn.io/issue-4-1/)       \n2、`NSManagedObjectContext`\n`NSManagedObjectContext`是程序员主要接触的一个类，也就是所有的操作基本上都通过它来操作的，底层是怎么实现的我们不需要去关心  \n3、`NSPersistentStoreCoordinator`\n`NSPersistentStoreCoordinator`才是最终的操作实现都是才是核心,[参考](http://objccn.io/issue-4-1)   \n4、[编程参考](http://iiiyu.com/2013/03/29/learning-ios-notes-eighteen/)\n## 七、关于异步加载问题\n1、`nsdata datawithcontentsofurl`是一个同步加载方法，因此要使用此方法要采用异步加载方法。可以适用于加载图片等；\n2、注意`AFNertworking success/failure block` invoked in main thread。如果 没有进行队列设置默认会返回到主线程去。 \n \n\n\n\tif(sucess)\n\t{\n\tdispatch_group_async(self.completionGroup?:http_request_operation_completion_group(),self.completionQueue?:dispatch_get_main_queue(),^{});\n\t}   \n     \n\n\n## 八、关于 strong,weak引用修饰符  \n\n1、strong相当于手动引用计数（manual reference count）中的retain，拥有对象直到对象释放。\n2、weak与strong刚好相反，weak并不持有对象，而且当对象释放时weak我修饰的对象会自动赋值为nil。例如：   \n\n\n\n\tid _weak obj = [[NSObject alloc]init];//错误，weak不能持有对象\t\n\tid _weak oo = nil;\n\t{\n\t   id strong object = [[NSObject alloc]init];\n\t   oo= object\n\t   NSLog(@\"%@\",oo)//此处对象是存在的\n\t}\n     \n\n\n## 九、[关于draweRect消耗内存](http://bihongbo.com/2016/01/03/memoryGhostdrawRect/)  \n要想搞明白这个问题，我们需要撸一撸在`iOS`程序上图形显示的原理。在`iOS`系统中所有显示的视图都是从基类`UIView`继承而来的，同时`UIView`负责接收用户交互。**但是实际上你所看到的视图内容，包括图形等，都是由`UIView`的一个实例图层属性来绘制和渲染的，那就是`CALayer`。**\n**最终我们的图形渲染落点落在`contents`身上**![如图](http://7xkdhe.com1.z0.glb.clouddn.com/drawRect3.001.png)。\n`contents`也被称为寄宿图，除了给它赋值`CGImage`之外，我们也可以直接对它进行绘制，绘制的方法正是这次问题的关键，通过继承`UIView`并实现`-drawRect:`方法即可自定义绘制。`-drawRect:` 方法没有默认的实现，因为对`UIView`来说，寄宿图并不是必须的，`UIView`不关心绘制的内容。如果`UIView`检测到`-drawRect:`方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以`contentsScale`(这个属性与屏幕分辨率有关，我们的画板程序在不同模拟器下呈现的内存用量不同也是因为它)的值。这也就是`-drawRect:`消耗内存的原因。\n\n**解决方案：**使用CAShapeLayer,另外与屏幕大小的画板可以算出消耗内存几M左右，可以接受   \n## 十、[关于设置圆角问题](http://www.cocoachina.com/ios/20160301/15486.html)  \n\n\n由于设置圆角发生离屏渲染，所以对    \n\n## 十一、[数据持久化]( http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html)\n\n1.使用 archive的对象需要实现<NSCoding>里的方法，关于NSCoder怎么使用参考如下 ：   \n\n\n\n\t- (\tvoid)encodeWithCoder:(NSCoder *\t)aCoder {\n\t    [aCoder encodeObject:self.firstName forKey:PERSON_KEY_FIRSTNAME];\n\t    [aCoder encodeObject:self.lastName forKey:PERSON_KEY_LASTNAME];\n\t    [aCoder encodeFloat:self.height forKey:PERSON_KEY_HEIGHT];\n\t}\n\t- (\n\tid\n\t)initWithCoder:(NSCoder *\n\t)aDecoder {\n\t    self \n\t=\n\t [super init];\t    \n\tif\n\t (self !=\n\t nil) {\n\t        self.firstName \n\t=\n\t [aDecoder decodeObjectForKey:PERSON_KEY_FIRSTNAME];\n\t        self.lastName \n\t=\n\t [aDecoder decodeObjectForKey:PERSON_KEY_LASTNAME];\n\t        self.height \n\t=\n\t [aDecoder decodeFloatForKey:PERSON_KEY_HEIGHT];\n\t    }\t    \n\treturn\n\t self;\n\t}\n   \n\n## 十二、离屏渲染  \n\n\n\n设置了以下属性时，都会触发离屏绘制：    \n\n+ shouldRasterize（光栅化）  \n+ masks（遮罩）    \n+ shadows（阴影）   \n+ edge antialiasing（抗锯齿）  \n\n\n+ group opacity（不透明）   \n\n\n+ 还有一种特殊的离屏渲染，`cpu`渲染，当我们使用drawRect时会触发\n\n\n\n\n\n\n\n","source":"_posts/iOS-Dev.md","raw":"---\ntitle: iOS Dev\ndate: 2017-03-18 11:08:00\ntags: [iOS, Dev]\ncategories: iOS\n---\n\n> iOS 学习笔记\n\n<!--More-->\n## 一、iOS基础知识\n### 1、语法\n\n1、类方法里是不可以调用普通方法的。\n\n2、`extension`与`catogry`的区别就是括号中有没有名字。另外`catogry`只可以增加方法不能增加属性，`extension`是可以增加属性的   \n\n3、`self`的赋值一定要在`initxxx`系列函数里调用，不能在别的函数里调用，`initialxxx`都不行\n\n\n### 2、关于在一个工程中添加自定义framework\n\n1、添加方式：File->New->Target->Cocoa Touch Framework\n2、真机测试时可会出现dyld:Library no loaded:....   \n**解决方法**：在app对应的Target->General->Embedded Binaries 添加自定义framwork\n\n### 3、Framework 命令行编译\n\n利用xcode tools[参考](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html),命令如下：\n\n> xcodebuild clean build -project /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/IMSDK.xcodeproj \n-target IMSDKCoreKit -configuration Release  -xcconfig /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/Demo/Configurations/IMSDKGNU++98.xcconfig -sdk iphoneos9.1\n\n\n### 4.[KVO]( https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html)     \n### 5.[ios https](http://io.diveinedu.com/2016/01/09/iOS%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS.html)\n### 6.runloop     \nrunloop只有在开启第二个线程的时候才考虑使用runloop，而且也并非所有的线程需要runloop\n+ 使用runloop的情况    \n  + use ports or custom input sources to communicate with other threads\n  + use timers on the thread\n  + use any of the `performSelector...`\n  + keep the thread around of perform periodic tasks     \n  \n+ performselector在后台执行时，必须开启一个runloop，否则调用不了     \n+ runLoop有两套API，NSRunloop,CFRunLoopRef     \n+ runLoop在获取时，就是创建\n+ 一个runloop有两个CFRunloopSource,source0:处理UIEvent，CFSocket,source1:mach port,CFMachPort,CFMessagePort;一种mode:default,tracking,common     \n\n### 7.copy与retain    \n+ copy是指拷贝内容    \n+ retain是指拷贝指针     \n+ copy需要对象遵守NSCopying协议的    \n+     \n\n### 8.关于xcode查看汇编的方法   \n+ xcode 7.x: Debug ==> Debug Workflow ==> Show Disassembly when Debugging     \n+ xocde 7.x之前： Product ==> Debug Workflow ==> Show Disassembly when Debugging    \n\n### 9.oc严格单例\n\n创建对象的步骤分为申请内存(alloc)、初始化(init)这两个步骤，我们要确保对象的唯一性，因此在第一步这个阶段我们就要拦截它。当我们调用alloc方法时，oc内部会调用allocWithZone这个方法来申请内存，我们覆写这个方法，然后在这个方法中调用shareInstance方法返回单例对象，这样就可以达到我们的目的。拷贝对象也是同样的原理，覆写copyWithZone方法，然后在这个方法中调用shareInstance方法返回单例对象。看代码吧：\n\n```\n\n\t#import \"Singleton.h\"  \n\t  \n\t@implementation Singleton  \n\t  \n\tstatic Singleton* _instance = nil;  \n\t  \n\t+(instancetype) shareInstance  \n\t{  \n\t    static dispatch_once_t onceToken ;  \n\t    dispatch_once(&onceToken, ^{  \n\t        _instance = [[super allocWithZone:NULL] init] ;  \n\t    }) ;  \n\t      \n\t    return _instance ;  \n\t}  \n\t  \n\t+(id) allocWithZone:(struct _NSZone *)zone  \n\t{  \n\t    return [Singleton shareInstance] ;  \n\t}  \n\t  \n\t-(id) copyWithZone:(struct _NSZone *)zone  \n\t{  \n\t    return [Singleton shareInstance] ;  \n\t}  \n\t  \n\t@end  \n```\n\n## 二、关于certificates 和provisioning proflies\n\n1、certificates：key(private key)\n\n2、provisioning profiles:(public key)\n\n + appid(bundle identifier) \n\n\n + devices(uuid)\n\n\n + certificates(private key)  \n\n3、.p12是证书导出保存的形式     \n4、wwdr证书失效会导致自己证书无效\n\n\n## 三、关于Clang 与LLVM  \n\n\nClang 是一个 C++ 编写、基于 LLVM、发布于 LLVM BSD 许可证下的/C++/Objective C/Objective C++ 编译器。LLVM 是 Low Level Virtual Machine。具体介绍参考[clang and llvm]( http://objccn.io/issue-6-2/)\n\n+ 命令clang -E 是用于宏定义展开  \n\n   \n\n## 四、反馈系统UI设计问题：\n\n\n\n\n\n1、toolbar的设计问题，当用storyboard进行布局的时候要做到适配效果子在UIbarbuttonItem之间加入flexispace才能做到适配。\n\n2、关于storyboard initialViewcontrollerwithIdentiy的问题，当view还没出现的时生成的对象的成员都会是空的，只有到显示的时候才会出现。解决要对其进行参数传递的时候要采用property方法或者利用dispatch_after方式来做\n\n3、关于ipad版本浮动窗口形式的问题。当在ipad版本下设置Modalpresentationstyle就可以达到这种效果\n4、关于storyboard的问题。一个app中可以有多个storyboard，通过instantiateviewcontrollerwithidentiter方式 来进行实例化。要注意的是storyboard要放到 mainbundle目录下\n5、消除返回按钮上的文字，利用self.naviagtionitem.backbuttonitem = [[uibarbuttom alloc ]initwithtitle:@\"\"] style:\n\ntarget:action];[参见]( http://www.cnblogs.com/ygm900/p/3659619.html )  \n\n## 五、关于isKindOfClass与isMemberOfClass的区别：\n\n1、isKindOfClass，是判断一个对象是属于哪个类~~ 型，一直追溯到父类~~ 。或者子类的实例\n\n2、isMemberClass，是判断一个对象属于哪个类~~ 型，不追溯到父类!~~ 。   \n## 六、Core Data编程\n1、core data 与sql的一些对应关系：\n\n| 功能 | sql |core data| \n| -- | -- |--|  \n|表头|表结构,实体，entity|NSEntityDescription|   \n|表中的一行数据|记录|NSManagedObject| \n|查询|查询,select ...|NSFetchRequest|   \n|持久化|表存储,。。。|NSPersistentStoreCoordinator|   \n|数据库的设计，也就是.xcodemodel文件|数据库模型,。。。|NSManagedObjectModel|   \n|操作上下文|数据库操作|NSManagedObjectContext|  \n[更详细的底层操作](http://objccn.io/issue-4-1/)       \n2、`NSManagedObjectContext`\n`NSManagedObjectContext`是程序员主要接触的一个类，也就是所有的操作基本上都通过它来操作的，底层是怎么实现的我们不需要去关心  \n3、`NSPersistentStoreCoordinator`\n`NSPersistentStoreCoordinator`才是最终的操作实现都是才是核心,[参考](http://objccn.io/issue-4-1)   \n4、[编程参考](http://iiiyu.com/2013/03/29/learning-ios-notes-eighteen/)\n## 七、关于异步加载问题\n1、`nsdata datawithcontentsofurl`是一个同步加载方法，因此要使用此方法要采用异步加载方法。可以适用于加载图片等；\n2、注意`AFNertworking success/failure block` invoked in main thread。如果 没有进行队列设置默认会返回到主线程去。 \n \n\n\n\tif(sucess)\n\t{\n\tdispatch_group_async(self.completionGroup?:http_request_operation_completion_group(),self.completionQueue?:dispatch_get_main_queue(),^{});\n\t}   \n     \n\n\n## 八、关于 strong,weak引用修饰符  \n\n1、strong相当于手动引用计数（manual reference count）中的retain，拥有对象直到对象释放。\n2、weak与strong刚好相反，weak并不持有对象，而且当对象释放时weak我修饰的对象会自动赋值为nil。例如：   \n\n\n\n\tid _weak obj = [[NSObject alloc]init];//错误，weak不能持有对象\t\n\tid _weak oo = nil;\n\t{\n\t   id strong object = [[NSObject alloc]init];\n\t   oo= object\n\t   NSLog(@\"%@\",oo)//此处对象是存在的\n\t}\n     \n\n\n## 九、[关于draweRect消耗内存](http://bihongbo.com/2016/01/03/memoryGhostdrawRect/)  \n要想搞明白这个问题，我们需要撸一撸在`iOS`程序上图形显示的原理。在`iOS`系统中所有显示的视图都是从基类`UIView`继承而来的，同时`UIView`负责接收用户交互。**但是实际上你所看到的视图内容，包括图形等，都是由`UIView`的一个实例图层属性来绘制和渲染的，那就是`CALayer`。**\n**最终我们的图形渲染落点落在`contents`身上**![如图](http://7xkdhe.com1.z0.glb.clouddn.com/drawRect3.001.png)。\n`contents`也被称为寄宿图，除了给它赋值`CGImage`之外，我们也可以直接对它进行绘制，绘制的方法正是这次问题的关键，通过继承`UIView`并实现`-drawRect:`方法即可自定义绘制。`-drawRect:` 方法没有默认的实现，因为对`UIView`来说，寄宿图并不是必须的，`UIView`不关心绘制的内容。如果`UIView`检测到`-drawRect:`方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以`contentsScale`(这个属性与屏幕分辨率有关，我们的画板程序在不同模拟器下呈现的内存用量不同也是因为它)的值。这也就是`-drawRect:`消耗内存的原因。\n\n**解决方案：**使用CAShapeLayer,另外与屏幕大小的画板可以算出消耗内存几M左右，可以接受   \n## 十、[关于设置圆角问题](http://www.cocoachina.com/ios/20160301/15486.html)  \n\n\n由于设置圆角发生离屏渲染，所以对    \n\n## 十一、[数据持久化]( http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html)\n\n1.使用 archive的对象需要实现<NSCoding>里的方法，关于NSCoder怎么使用参考如下 ：   \n\n\n\n\t- (\tvoid)encodeWithCoder:(NSCoder *\t)aCoder {\n\t    [aCoder encodeObject:self.firstName forKey:PERSON_KEY_FIRSTNAME];\n\t    [aCoder encodeObject:self.lastName forKey:PERSON_KEY_LASTNAME];\n\t    [aCoder encodeFloat:self.height forKey:PERSON_KEY_HEIGHT];\n\t}\n\t- (\n\tid\n\t)initWithCoder:(NSCoder *\n\t)aDecoder {\n\t    self \n\t=\n\t [super init];\t    \n\tif\n\t (self !=\n\t nil) {\n\t        self.firstName \n\t=\n\t [aDecoder decodeObjectForKey:PERSON_KEY_FIRSTNAME];\n\t        self.lastName \n\t=\n\t [aDecoder decodeObjectForKey:PERSON_KEY_LASTNAME];\n\t        self.height \n\t=\n\t [aDecoder decodeFloatForKey:PERSON_KEY_HEIGHT];\n\t    }\t    \n\treturn\n\t self;\n\t}\n   \n\n## 十二、离屏渲染  \n\n\n\n设置了以下属性时，都会触发离屏绘制：    \n\n+ shouldRasterize（光栅化）  \n+ masks（遮罩）    \n+ shadows（阴影）   \n+ edge antialiasing（抗锯齿）  \n\n\n+ group opacity（不透明）   \n\n\n+ 还有一种特殊的离屏渲染，`cpu`渲染，当我们使用drawRect时会触发\n\n\n\n\n\n\n\n","slug":"iOS-Dev","published":1,"updated":"2017-03-22T07:22:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wrg000asjveih1v2dwa","content":"<blockquote>\n<p>iOS 学习笔记</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"一、iOS基础知识\"><a href=\"#一、iOS基础知识\" class=\"headerlink\" title=\"一、iOS基础知识\"></a>一、iOS基础知识</h2><h3 id=\"1、语法\"><a href=\"#1、语法\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>1、类方法里是不可以调用普通方法的。</p>\n<p>2、<code>extension</code>与<code>catogry</code>的区别就是括号中有没有名字。另外<code>catogry</code>只可以增加方法不能增加属性，<code>extension</code>是可以增加属性的   </p>\n<p>3、<code>self</code>的赋值一定要在<code>initxxx</code>系列函数里调用，不能在别的函数里调用，<code>initialxxx</code>都不行</p>\n<h3 id=\"2、关于在一个工程中添加自定义framework\"><a href=\"#2、关于在一个工程中添加自定义framework\" class=\"headerlink\" title=\"2、关于在一个工程中添加自定义framework\"></a>2、关于在一个工程中添加自定义framework</h3><p>1、添加方式：File-&gt;New-&gt;Target-&gt;Cocoa Touch Framework<br>2、真机测试时可会出现dyld:Library no loaded:….<br><strong>解决方法</strong>：在app对应的Target-&gt;General-&gt;Embedded Binaries 添加自定义framwork</p>\n<h3 id=\"3、Framework-命令行编译\"><a href=\"#3、Framework-命令行编译\" class=\"headerlink\" title=\"3、Framework 命令行编译\"></a>3、Framework 命令行编译</h3><p>利用xcode tools<a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\" target=\"_blank\" rel=\"external\">参考</a>,命令如下：</p>\n<blockquote>\n<p>xcodebuild clean build -project /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/IMSDK.xcodeproj<br>-target IMSDKCoreKit -configuration Release  -xcconfig /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/Demo/Configurations/IMSDKGNU++98.xcconfig -sdk iphoneos9.1</p>\n</blockquote>\n<h3 id=\"4-KVO\"><a href=\"#4-KVO\" class=\"headerlink\" title=\"4.KVO\"></a>4.<a href=\"https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html\" target=\"_blank\" rel=\"external\">KVO</a></h3><h3 id=\"5-ios-https\"><a href=\"#5-ios-https\" class=\"headerlink\" title=\"5.ios https\"></a>5.<a href=\"http://io.diveinedu.com/2016/01/09/iOS%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS.html\" target=\"_blank\" rel=\"external\">ios https</a></h3><h3 id=\"6-runloop\"><a href=\"#6-runloop\" class=\"headerlink\" title=\"6.runloop\"></a>6.runloop</h3><p>runloop只有在开启第二个线程的时候才考虑使用runloop，而且也并非所有的线程需要runloop</p>\n<ul>\n<li><p>使用runloop的情况    </p>\n<ul>\n<li>use ports or custom input sources to communicate with other threads</li>\n<li>use timers on the thread</li>\n<li>use any of the <code>performSelector...</code></li>\n<li>keep the thread around of perform periodic tasks     </li>\n</ul>\n</li>\n<li><p>performselector在后台执行时，必须开启一个runloop，否则调用不了     </p>\n</li>\n<li>runLoop有两套API，NSRunloop,CFRunLoopRef     </li>\n<li>runLoop在获取时，就是创建</li>\n<li>一个runloop有两个CFRunloopSource,source0:处理UIEvent，CFSocket,source1:mach port,CFMachPort,CFMessagePort;一种mode:default,tracking,common     </li>\n</ul>\n<h3 id=\"7-copy与retain\"><a href=\"#7-copy与retain\" class=\"headerlink\" title=\"7.copy与retain\"></a>7.copy与retain</h3><ul>\n<li>copy是指拷贝内容    </li>\n<li>retain是指拷贝指针     </li>\n<li>copy需要对象遵守NSCopying协议的    </li>\n<li></li>\n</ul>\n<h3 id=\"8-关于xcode查看汇编的方法\"><a href=\"#8-关于xcode查看汇编的方法\" class=\"headerlink\" title=\"8.关于xcode查看汇编的方法\"></a>8.关于xcode查看汇编的方法</h3><ul>\n<li>xcode 7.x: Debug ==&gt; Debug Workflow ==&gt; Show Disassembly when Debugging     </li>\n<li>xocde 7.x之前： Product ==&gt; Debug Workflow ==&gt; Show Disassembly when Debugging    </li>\n</ul>\n<h3 id=\"9-oc严格单例\"><a href=\"#9-oc严格单例\" class=\"headerlink\" title=\"9.oc严格单例\"></a>9.oc严格单例</h3><p>创建对象的步骤分为申请内存(alloc)、初始化(init)这两个步骤，我们要确保对象的唯一性，因此在第一步这个阶段我们就要拦截它。当我们调用alloc方法时，oc内部会调用allocWithZone这个方法来申请内存，我们覆写这个方法，然后在这个方法中调用shareInstance方法返回单例对象，这样就可以达到我们的目的。拷贝对象也是同样的原理，覆写copyWithZone方法，然后在这个方法中调用shareInstance方法返回单例对象。看代码吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#import &quot;Singleton.h&quot;  </div><div class=\"line\">  </div><div class=\"line\">@implementation Singleton  </div><div class=\"line\">  </div><div class=\"line\">static Singleton* _instance = nil;  </div><div class=\"line\">  </div><div class=\"line\">+(instancetype) shareInstance  </div><div class=\"line\">&#123;  </div><div class=\"line\">    static dispatch_once_t onceToken ;  </div><div class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;  </div><div class=\"line\">        _instance = [[super allocWithZone:NULL] init] ;  </div><div class=\"line\">    &#125;) ;  </div><div class=\"line\">      </div><div class=\"line\">    return _instance ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">+(id) allocWithZone:(struct _NSZone *)zone  </div><div class=\"line\">&#123;  </div><div class=\"line\">    return [Singleton shareInstance] ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">-(id) copyWithZone:(struct _NSZone *)zone  </div><div class=\"line\">&#123;  </div><div class=\"line\">    return [Singleton shareInstance] ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h2 id=\"二、关于certificates-和provisioning-proflies\"><a href=\"#二、关于certificates-和provisioning-proflies\" class=\"headerlink\" title=\"二、关于certificates 和provisioning proflies\"></a>二、关于certificates 和provisioning proflies</h2><p>1、certificates：key(private key)</p>\n<p>2、provisioning profiles:(public key)</p>\n<ul>\n<li>appid(bundle identifier) </li>\n</ul>\n<ul>\n<li>devices(uuid)</li>\n</ul>\n<ul>\n<li>certificates(private key)  </li>\n</ul>\n<p>3、.p12是证书导出保存的形式<br>4、wwdr证书失效会导致自己证书无效</p>\n<h2 id=\"三、关于Clang-与LLVM\"><a href=\"#三、关于Clang-与LLVM\" class=\"headerlink\" title=\"三、关于Clang 与LLVM\"></a>三、关于Clang 与LLVM</h2><p>Clang 是一个 C++ 编写、基于 LLVM、发布于 LLVM BSD 许可证下的/C++/Objective C/Objective C++ 编译器。LLVM 是 Low Level Virtual Machine。具体介绍参考<a href=\"http://objccn.io/issue-6-2/\" target=\"_blank\" rel=\"external\">clang and llvm</a></p>\n<ul>\n<li>命令clang -E 是用于宏定义展开  </li>\n</ul>\n<h2 id=\"四、反馈系统UI设计问题：\"><a href=\"#四、反馈系统UI设计问题：\" class=\"headerlink\" title=\"四、反馈系统UI设计问题：\"></a>四、反馈系统UI设计问题：</h2><p>1、toolbar的设计问题，当用storyboard进行布局的时候要做到适配效果子在UIbarbuttonItem之间加入flexispace才能做到适配。</p>\n<p>2、关于storyboard initialViewcontrollerwithIdentiy的问题，当view还没出现的时生成的对象的成员都会是空的，只有到显示的时候才会出现。解决要对其进行参数传递的时候要采用property方法或者利用dispatch_after方式来做</p>\n<p>3、关于ipad版本浮动窗口形式的问题。当在ipad版本下设置Modalpresentationstyle就可以达到这种效果<br>4、关于storyboard的问题。一个app中可以有多个storyboard，通过instantiateviewcontrollerwithidentiter方式 来进行实例化。要注意的是storyboard要放到 mainbundle目录下<br>5、消除返回按钮上的文字，利用self.naviagtionitem.backbuttonitem = [[uibarbuttom alloc ]initwithtitle:@””] style:</p>\n<p>target:action];<a href=\"http://www.cnblogs.com/ygm900/p/3659619.html\" target=\"_blank\" rel=\"external\">参见</a>  </p>\n<h2 id=\"五、关于isKindOfClass与isMemberOfClass的区别：\"><a href=\"#五、关于isKindOfClass与isMemberOfClass的区别：\" class=\"headerlink\" title=\"五、关于isKindOfClass与isMemberOfClass的区别：\"></a>五、关于isKindOfClass与isMemberOfClass的区别：</h2><p>1、isKindOfClass，是判断一个对象是属于哪个类~~ 型，一直追溯到父类~~ 。或者子类的实例</p>\n<p>2、isMemberClass，是判断一个对象属于哪个类~~ 型，不追溯到父类!~~ 。   </p>\n<h2 id=\"六、Core-Data编程\"><a href=\"#六、Core-Data编程\" class=\"headerlink\" title=\"六、Core Data编程\"></a>六、Core Data编程</h2><p>1、core data 与sql的一些对应关系：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>sql</th>\n<th>core data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表头</td>\n<td>表结构,实体，entity</td>\n<td>NSEntityDescription</td>\n</tr>\n<tr>\n<td>表中的一行数据</td>\n<td>记录</td>\n<td>NSManagedObject</td>\n</tr>\n<tr>\n<td>查询</td>\n<td>查询,select …</td>\n<td>NSFetchRequest</td>\n</tr>\n<tr>\n<td>持久化</td>\n<td>表存储,。。。</td>\n<td>NSPersistentStoreCoordinator</td>\n</tr>\n<tr>\n<td>数据库的设计，也就是.xcodemodel文件</td>\n<td>数据库模型,。。。</td>\n<td>NSManagedObjectModel</td>\n</tr>\n<tr>\n<td>操作上下文</td>\n<td>数据库操作</td>\n<td>NSManagedObjectContext</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://objccn.io/issue-4-1/\" target=\"_blank\" rel=\"external\">更详细的底层操作</a><br>2、<code>NSManagedObjectContext</code><br><code>NSManagedObjectContext</code>是程序员主要接触的一个类，也就是所有的操作基本上都通过它来操作的，底层是怎么实现的我们不需要去关心<br>3、<code>NSPersistentStoreCoordinator</code><br><code>NSPersistentStoreCoordinator</code>才是最终的操作实现都是才是核心,<a href=\"http://objccn.io/issue-4-1\" target=\"_blank\" rel=\"external\">参考</a><br>4、<a href=\"http://iiiyu.com/2013/03/29/learning-ios-notes-eighteen/\" target=\"_blank\" rel=\"external\">编程参考</a></p>\n<h2 id=\"七、关于异步加载问题\"><a href=\"#七、关于异步加载问题\" class=\"headerlink\" title=\"七、关于异步加载问题\"></a>七、关于异步加载问题</h2><p>1、<code>nsdata datawithcontentsofurl</code>是一个同步加载方法，因此要使用此方法要采用异步加载方法。可以适用于加载图片等；<br>2、注意<code>AFNertworking success/failure block</code> invoked in main thread。如果 没有进行队列设置默认会返回到主线程去。 </p>\n<pre><code>if(sucess)\n{\ndispatch_group_async(self.completionGroup?:http_request_operation_completion_group(),self.completionQueue?:dispatch_get_main_queue(),^{});\n}   \n</code></pre><h2 id=\"八、关于-strong-weak引用修饰符\"><a href=\"#八、关于-strong-weak引用修饰符\" class=\"headerlink\" title=\"八、关于 strong,weak引用修饰符\"></a>八、关于 strong,weak引用修饰符</h2><p>1、strong相当于手动引用计数（manual reference count）中的retain，拥有对象直到对象释放。<br>2、weak与strong刚好相反，weak并不持有对象，而且当对象释放时weak我修饰的对象会自动赋值为nil。例如：   </p>\n<pre><code>id _weak obj = [[NSObject alloc]init];//错误，weak不能持有对象    \nid _weak oo = nil;\n{\n   id strong object = [[NSObject alloc]init];\n   oo= object\n   NSLog(@&quot;%@&quot;,oo)//此处对象是存在的\n}\n</code></pre><h2 id=\"九、关于draweRect消耗内存\"><a href=\"#九、关于draweRect消耗内存\" class=\"headerlink\" title=\"九、关于draweRect消耗内存\"></a>九、<a href=\"http://bihongbo.com/2016/01/03/memoryGhostdrawRect/\" target=\"_blank\" rel=\"external\">关于draweRect消耗内存</a></h2><p>要想搞明白这个问题，我们需要撸一撸在<code>iOS</code>程序上图形显示的原理。在<code>iOS</code>系统中所有显示的视图都是从基类<code>UIView</code>继承而来的，同时<code>UIView</code>负责接收用户交互。<strong>但是实际上你所看到的视图内容，包括图形等，都是由<code>UIView</code>的一个实例图层属性来绘制和渲染的，那就是<code>CALayer</code>。</strong><br><strong>最终我们的图形渲染落点落在<code>contents</code>身上</strong><img src=\"http://7xkdhe.com1.z0.glb.clouddn.com/drawRect3.001.png\" alt=\"如图\">。<br><code>contents</code>也被称为寄宿图，除了给它赋值<code>CGImage</code>之外，我们也可以直接对它进行绘制，绘制的方法正是这次问题的关键，通过继承<code>UIView</code>并实现<code>-drawRect:</code>方法即可自定义绘制。<code>-drawRect:</code> 方法没有默认的实现，因为对<code>UIView</code>来说，寄宿图并不是必须的，<code>UIView</code>不关心绘制的内容。如果<code>UIView</code>检测到<code>-drawRect:</code>方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以<code>contentsScale</code>(这个属性与屏幕分辨率有关，我们的画板程序在不同模拟器下呈现的内存用量不同也是因为它)的值。这也就是<code>-drawRect:</code>消耗内存的原因。</p>\n<p><strong>解决方案：</strong>使用CAShapeLayer,另外与屏幕大小的画板可以算出消耗内存几M左右，可以接受   </p>\n<h2 id=\"十、关于设置圆角问题\"><a href=\"#十、关于设置圆角问题\" class=\"headerlink\" title=\"十、关于设置圆角问题\"></a>十、<a href=\"http://www.cocoachina.com/ios/20160301/15486.html\" target=\"_blank\" rel=\"external\">关于设置圆角问题</a></h2><p>由于设置圆角发生离屏渲染，所以对    </p>\n<h2 id=\"十一、数据持久化\"><a href=\"#十一、数据持久化\" class=\"headerlink\" title=\"十一、数据持久化\"></a>十一、<a href=\"http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html\" target=\"_blank\" rel=\"external\">数据持久化</a></h2><p>1.使用 archive的对象需要实现<nscoding>里的方法，关于NSCoder怎么使用参考如下 ：   </nscoding></p>\n<pre><code>- (    void)encodeWithCoder:(NSCoder *    )aCoder {\n    [aCoder encodeObject:self.firstName forKey:PERSON_KEY_FIRSTNAME];\n    [aCoder encodeObject:self.lastName forKey:PERSON_KEY_LASTNAME];\n    [aCoder encodeFloat:self.height forKey:PERSON_KEY_HEIGHT];\n}\n- (\nid\n)initWithCoder:(NSCoder *\n)aDecoder {\n    self \n=\n [super init];        \nif\n (self !=\n nil) {\n        self.firstName \n=\n [aDecoder decodeObjectForKey:PERSON_KEY_FIRSTNAME];\n        self.lastName \n=\n [aDecoder decodeObjectForKey:PERSON_KEY_LASTNAME];\n        self.height \n=\n [aDecoder decodeFloatForKey:PERSON_KEY_HEIGHT];\n    }        \nreturn\n self;\n}\n</code></pre><h2 id=\"十二、离屏渲染\"><a href=\"#十二、离屏渲染\" class=\"headerlink\" title=\"十二、离屏渲染\"></a>十二、离屏渲染</h2><p>设置了以下属性时，都会触发离屏绘制：    </p>\n<ul>\n<li>shouldRasterize（光栅化）  </li>\n<li>masks（遮罩）    </li>\n<li>shadows（阴影）   </li>\n<li>edge antialiasing（抗锯齿）  </li>\n</ul>\n<ul>\n<li>group opacity（不透明）   </li>\n</ul>\n<ul>\n<li>还有一种特殊的离屏渲染，<code>cpu</code>渲染，当我们使用drawRect时会触发</li>\n</ul>\n","excerpt":"<blockquote>\n<p>iOS 学习笔记</p>\n</blockquote>","more":"<h2 id=\"一、iOS基础知识\"><a href=\"#一、iOS基础知识\" class=\"headerlink\" title=\"一、iOS基础知识\"></a>一、iOS基础知识</h2><h3 id=\"1、语法\"><a href=\"#1、语法\" class=\"headerlink\" title=\"1、语法\"></a>1、语法</h3><p>1、类方法里是不可以调用普通方法的。</p>\n<p>2、<code>extension</code>与<code>catogry</code>的区别就是括号中有没有名字。另外<code>catogry</code>只可以增加方法不能增加属性，<code>extension</code>是可以增加属性的   </p>\n<p>3、<code>self</code>的赋值一定要在<code>initxxx</code>系列函数里调用，不能在别的函数里调用，<code>initialxxx</code>都不行</p>\n<h3 id=\"2、关于在一个工程中添加自定义framework\"><a href=\"#2、关于在一个工程中添加自定义framework\" class=\"headerlink\" title=\"2、关于在一个工程中添加自定义framework\"></a>2、关于在一个工程中添加自定义framework</h3><p>1、添加方式：File-&gt;New-&gt;Target-&gt;Cocoa Touch Framework<br>2、真机测试时可会出现dyld:Library no loaded:….<br><strong>解决方法</strong>：在app对应的Target-&gt;General-&gt;Embedded Binaries 添加自定义framwork</p>\n<h3 id=\"3、Framework-命令行编译\"><a href=\"#3、Framework-命令行编译\" class=\"headerlink\" title=\"3、Framework 命令行编译\"></a>3、Framework 命令行编译</h3><p>利用xcode tools<a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html\">参考</a>,命令如下：</p>\n<blockquote>\n<p>xcodebuild clean build -project /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/IMSDK.xcodeproj<br>-target IMSDKCoreKit -configuration Release  -xcconfig /Users/yuanchengsu/Desktop/iMSDK/iMSDK/iOS/IMSDK/Demo/Configurations/IMSDKGNU++98.xcconfig -sdk iphoneos9.1</p>\n</blockquote>\n<h3 id=\"4-KVO\"><a href=\"#4-KVO\" class=\"headerlink\" title=\"4.KVO\"></a>4.<a href=\"https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html\">KVO</a></h3><h3 id=\"5-ios-https\"><a href=\"#5-ios-https\" class=\"headerlink\" title=\"5.ios https\"></a>5.<a href=\"http://io.diveinedu.com/2016/01/09/iOS%E5%BA%94%E7%94%A8%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS.html\">ios https</a></h3><h3 id=\"6-runloop\"><a href=\"#6-runloop\" class=\"headerlink\" title=\"6.runloop\"></a>6.runloop</h3><p>runloop只有在开启第二个线程的时候才考虑使用runloop，而且也并非所有的线程需要runloop</p>\n<ul>\n<li><p>使用runloop的情况    </p>\n<ul>\n<li>use ports or custom input sources to communicate with other threads</li>\n<li>use timers on the thread</li>\n<li>use any of the <code>performSelector...</code></li>\n<li>keep the thread around of perform periodic tasks     </li>\n</ul>\n</li>\n<li><p>performselector在后台执行时，必须开启一个runloop，否则调用不了     </p>\n</li>\n<li>runLoop有两套API，NSRunloop,CFRunLoopRef     </li>\n<li>runLoop在获取时，就是创建</li>\n<li>一个runloop有两个CFRunloopSource,source0:处理UIEvent，CFSocket,source1:mach port,CFMachPort,CFMessagePort;一种mode:default,tracking,common     </li>\n</ul>\n<h3 id=\"7-copy与retain\"><a href=\"#7-copy与retain\" class=\"headerlink\" title=\"7.copy与retain\"></a>7.copy与retain</h3><ul>\n<li>copy是指拷贝内容    </li>\n<li>retain是指拷贝指针     </li>\n<li>copy需要对象遵守NSCopying协议的    </li>\n<li></li>\n</ul>\n<h3 id=\"8-关于xcode查看汇编的方法\"><a href=\"#8-关于xcode查看汇编的方法\" class=\"headerlink\" title=\"8.关于xcode查看汇编的方法\"></a>8.关于xcode查看汇编的方法</h3><ul>\n<li>xcode 7.x: Debug ==&gt; Debug Workflow ==&gt; Show Disassembly when Debugging     </li>\n<li>xocde 7.x之前： Product ==&gt; Debug Workflow ==&gt; Show Disassembly when Debugging    </li>\n</ul>\n<h3 id=\"9-oc严格单例\"><a href=\"#9-oc严格单例\" class=\"headerlink\" title=\"9.oc严格单例\"></a>9.oc严格单例</h3><p>创建对象的步骤分为申请内存(alloc)、初始化(init)这两个步骤，我们要确保对象的唯一性，因此在第一步这个阶段我们就要拦截它。当我们调用alloc方法时，oc内部会调用allocWithZone这个方法来申请内存，我们覆写这个方法，然后在这个方法中调用shareInstance方法返回单例对象，这样就可以达到我们的目的。拷贝对象也是同样的原理，覆写copyWithZone方法，然后在这个方法中调用shareInstance方法返回单例对象。看代码吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#import &quot;Singleton.h&quot;  </div><div class=\"line\">  </div><div class=\"line\">@implementation Singleton  </div><div class=\"line\">  </div><div class=\"line\">static Singleton* _instance = nil;  </div><div class=\"line\">  </div><div class=\"line\">+(instancetype) shareInstance  </div><div class=\"line\">&#123;  </div><div class=\"line\">    static dispatch_once_t onceToken ;  </div><div class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;  </div><div class=\"line\">        _instance = [[super allocWithZone:NULL] init] ;  </div><div class=\"line\">    &#125;) ;  </div><div class=\"line\">      </div><div class=\"line\">    return _instance ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">+(id) allocWithZone:(struct _NSZone *)zone  </div><div class=\"line\">&#123;  </div><div class=\"line\">    return [Singleton shareInstance] ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">-(id) copyWithZone:(struct _NSZone *)zone  </div><div class=\"line\">&#123;  </div><div class=\"line\">    return [Singleton shareInstance] ;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<h2 id=\"二、关于certificates-和provisioning-proflies\"><a href=\"#二、关于certificates-和provisioning-proflies\" class=\"headerlink\" title=\"二、关于certificates 和provisioning proflies\"></a>二、关于certificates 和provisioning proflies</h2><p>1、certificates：key(private key)</p>\n<p>2、provisioning profiles:(public key)</p>\n<ul>\n<li>appid(bundle identifier) </li>\n</ul>\n<ul>\n<li>devices(uuid)</li>\n</ul>\n<ul>\n<li>certificates(private key)  </li>\n</ul>\n<p>3、.p12是证书导出保存的形式<br>4、wwdr证书失效会导致自己证书无效</p>\n<h2 id=\"三、关于Clang-与LLVM\"><a href=\"#三、关于Clang-与LLVM\" class=\"headerlink\" title=\"三、关于Clang 与LLVM\"></a>三、关于Clang 与LLVM</h2><p>Clang 是一个 C++ 编写、基于 LLVM、发布于 LLVM BSD 许可证下的/C++/Objective C/Objective C++ 编译器。LLVM 是 Low Level Virtual Machine。具体介绍参考<a href=\"http://objccn.io/issue-6-2/\">clang and llvm</a></p>\n<ul>\n<li>命令clang -E 是用于宏定义展开  </li>\n</ul>\n<h2 id=\"四、反馈系统UI设计问题：\"><a href=\"#四、反馈系统UI设计问题：\" class=\"headerlink\" title=\"四、反馈系统UI设计问题：\"></a>四、反馈系统UI设计问题：</h2><p>1、toolbar的设计问题，当用storyboard进行布局的时候要做到适配效果子在UIbarbuttonItem之间加入flexispace才能做到适配。</p>\n<p>2、关于storyboard initialViewcontrollerwithIdentiy的问题，当view还没出现的时生成的对象的成员都会是空的，只有到显示的时候才会出现。解决要对其进行参数传递的时候要采用property方法或者利用dispatch_after方式来做</p>\n<p>3、关于ipad版本浮动窗口形式的问题。当在ipad版本下设置Modalpresentationstyle就可以达到这种效果<br>4、关于storyboard的问题。一个app中可以有多个storyboard，通过instantiateviewcontrollerwithidentiter方式 来进行实例化。要注意的是storyboard要放到 mainbundle目录下<br>5、消除返回按钮上的文字，利用self.naviagtionitem.backbuttonitem = [[uibarbuttom alloc ]initwithtitle:@””] style:</p>\n<p>target:action];<a href=\"http://www.cnblogs.com/ygm900/p/3659619.html\">参见</a>  </p>\n<h2 id=\"五、关于isKindOfClass与isMemberOfClass的区别：\"><a href=\"#五、关于isKindOfClass与isMemberOfClass的区别：\" class=\"headerlink\" title=\"五、关于isKindOfClass与isMemberOfClass的区别：\"></a>五、关于isKindOfClass与isMemberOfClass的区别：</h2><p>1、isKindOfClass，是判断一个对象是属于哪个类~~ 型，一直追溯到父类~~ 。或者子类的实例</p>\n<p>2、isMemberClass，是判断一个对象属于哪个类~~ 型，不追溯到父类!~~ 。   </p>\n<h2 id=\"六、Core-Data编程\"><a href=\"#六、Core-Data编程\" class=\"headerlink\" title=\"六、Core Data编程\"></a>六、Core Data编程</h2><p>1、core data 与sql的一些对应关系：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>sql</th>\n<th>core data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表头</td>\n<td>表结构,实体，entity</td>\n<td>NSEntityDescription</td>\n</tr>\n<tr>\n<td>表中的一行数据</td>\n<td>记录</td>\n<td>NSManagedObject</td>\n</tr>\n<tr>\n<td>查询</td>\n<td>查询,select …</td>\n<td>NSFetchRequest</td>\n</tr>\n<tr>\n<td>持久化</td>\n<td>表存储,。。。</td>\n<td>NSPersistentStoreCoordinator</td>\n</tr>\n<tr>\n<td>数据库的设计，也就是.xcodemodel文件</td>\n<td>数据库模型,。。。</td>\n<td>NSManagedObjectModel</td>\n</tr>\n<tr>\n<td>操作上下文</td>\n<td>数据库操作</td>\n<td>NSManagedObjectContext</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://objccn.io/issue-4-1/\">更详细的底层操作</a><br>2、<code>NSManagedObjectContext</code><br><code>NSManagedObjectContext</code>是程序员主要接触的一个类，也就是所有的操作基本上都通过它来操作的，底层是怎么实现的我们不需要去关心<br>3、<code>NSPersistentStoreCoordinator</code><br><code>NSPersistentStoreCoordinator</code>才是最终的操作实现都是才是核心,<a href=\"http://objccn.io/issue-4-1\">参考</a><br>4、<a href=\"http://iiiyu.com/2013/03/29/learning-ios-notes-eighteen/\">编程参考</a></p>\n<h2 id=\"七、关于异步加载问题\"><a href=\"#七、关于异步加载问题\" class=\"headerlink\" title=\"七、关于异步加载问题\"></a>七、关于异步加载问题</h2><p>1、<code>nsdata datawithcontentsofurl</code>是一个同步加载方法，因此要使用此方法要采用异步加载方法。可以适用于加载图片等；<br>2、注意<code>AFNertworking success/failure block</code> invoked in main thread。如果 没有进行队列设置默认会返回到主线程去。 </p>\n<pre><code>if(sucess)\n{\ndispatch_group_async(self.completionGroup?:http_request_operation_completion_group(),self.completionQueue?:dispatch_get_main_queue(),^{});\n}   \n</code></pre><h2 id=\"八、关于-strong-weak引用修饰符\"><a href=\"#八、关于-strong-weak引用修饰符\" class=\"headerlink\" title=\"八、关于 strong,weak引用修饰符\"></a>八、关于 strong,weak引用修饰符</h2><p>1、strong相当于手动引用计数（manual reference count）中的retain，拥有对象直到对象释放。<br>2、weak与strong刚好相反，weak并不持有对象，而且当对象释放时weak我修饰的对象会自动赋值为nil。例如：   </p>\n<pre><code>id _weak obj = [[NSObject alloc]init];//错误，weak不能持有对象    \nid _weak oo = nil;\n{\n   id strong object = [[NSObject alloc]init];\n   oo= object\n   NSLog(@&quot;%@&quot;,oo)//此处对象是存在的\n}\n</code></pre><h2 id=\"九、关于draweRect消耗内存\"><a href=\"#九、关于draweRect消耗内存\" class=\"headerlink\" title=\"九、关于draweRect消耗内存\"></a>九、<a href=\"http://bihongbo.com/2016/01/03/memoryGhostdrawRect/\">关于draweRect消耗内存</a></h2><p>要想搞明白这个问题，我们需要撸一撸在<code>iOS</code>程序上图形显示的原理。在<code>iOS</code>系统中所有显示的视图都是从基类<code>UIView</code>继承而来的，同时<code>UIView</code>负责接收用户交互。<strong>但是实际上你所看到的视图内容，包括图形等，都是由<code>UIView</code>的一个实例图层属性来绘制和渲染的，那就是<code>CALayer</code>。</strong><br><strong>最终我们的图形渲染落点落在<code>contents</code>身上</strong><img src=\"http://7xkdhe.com1.z0.glb.clouddn.com/drawRect3.001.png\" alt=\"如图\">。<br><code>contents</code>也被称为寄宿图，除了给它赋值<code>CGImage</code>之外，我们也可以直接对它进行绘制，绘制的方法正是这次问题的关键，通过继承<code>UIView</code>并实现<code>-drawRect:</code>方法即可自定义绘制。<code>-drawRect:</code> 方法没有默认的实现，因为对<code>UIView</code>来说，寄宿图并不是必须的，<code>UIView</code>不关心绘制的内容。如果<code>UIView</code>检测到<code>-drawRect:</code>方法被调用了，它就会为视图分配一个寄宿图，这个寄宿图的像素尺寸等于视图大小乘以<code>contentsScale</code>(这个属性与屏幕分辨率有关，我们的画板程序在不同模拟器下呈现的内存用量不同也是因为它)的值。这也就是<code>-drawRect:</code>消耗内存的原因。</p>\n<p><strong>解决方案：</strong>使用CAShapeLayer,另外与屏幕大小的画板可以算出消耗内存几M左右，可以接受   </p>\n<h2 id=\"十、关于设置圆角问题\"><a href=\"#十、关于设置圆角问题\" class=\"headerlink\" title=\"十、关于设置圆角问题\"></a>十、<a href=\"http://www.cocoachina.com/ios/20160301/15486.html\">关于设置圆角问题</a></h2><p>由于设置圆角发生离屏渲染，所以对    </p>\n<h2 id=\"十一、数据持久化\"><a href=\"#十一、数据持久化\" class=\"headerlink\" title=\"十一、数据持久化\"></a>十一、<a href=\"http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html\">数据持久化</a></h2><p>1.使用 archive的对象需要实现<NSCoding>里的方法，关于NSCoder怎么使用参考如下 ：   </p>\n<pre><code>- (    void)encodeWithCoder:(NSCoder *    )aCoder {\n    [aCoder encodeObject:self.firstName forKey:PERSON_KEY_FIRSTNAME];\n    [aCoder encodeObject:self.lastName forKey:PERSON_KEY_LASTNAME];\n    [aCoder encodeFloat:self.height forKey:PERSON_KEY_HEIGHT];\n}\n- (\nid\n)initWithCoder:(NSCoder *\n)aDecoder {\n    self \n=\n [super init];        \nif\n (self !=\n nil) {\n        self.firstName \n=\n [aDecoder decodeObjectForKey:PERSON_KEY_FIRSTNAME];\n        self.lastName \n=\n [aDecoder decodeObjectForKey:PERSON_KEY_LASTNAME];\n        self.height \n=\n [aDecoder decodeFloatForKey:PERSON_KEY_HEIGHT];\n    }        \nreturn\n self;\n}\n</code></pre><h2 id=\"十二、离屏渲染\"><a href=\"#十二、离屏渲染\" class=\"headerlink\" title=\"十二、离屏渲染\"></a>十二、离屏渲染</h2><p>设置了以下属性时，都会触发离屏绘制：    </p>\n<ul>\n<li>shouldRasterize（光栅化）  </li>\n<li>masks（遮罩）    </li>\n<li>shadows（阴影）   </li>\n<li>edge antialiasing（抗锯齿）  </li>\n</ul>\n<ul>\n<li>group opacity（不透明）   </li>\n</ul>\n<ul>\n<li>还有一种特殊的离屏渲染，<code>cpu</code>渲染，当我们使用drawRect时会触发</li>\n</ul>"},{"title":"学习资源大全","date":"2017-03-19T12:03:28.000Z","_content":"> 本篇Blog主要收藏一些优秀学习资源\n\n<!--More-->\n\n# 1、[TensorFlow学习资源大全，包括教程，博文，工程等](http://blog.jobbole.com/110558/)\n> tensorflow最近刚好想学，便收藏此等好文","source":"_posts/学习资源大全.md","raw":"---\ntitle: 学习资源大全\ndate: 2017-03-19 20:03:28\ntags: [网页, 学习资源]\ncategories: \"学习资源\"\n---\n> 本篇Blog主要收藏一些优秀学习资源\n\n<!--More-->\n\n# 1、[TensorFlow学习资源大全，包括教程，博文，工程等](http://blog.jobbole.com/110558/)\n> tensorflow最近刚好想学，便收藏此等好文","slug":"学习资源大全","published":1,"updated":"2017-03-20T01:25:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0wb1wri000csjvef906o88c","content":"<blockquote>\n<p>本篇Blog主要收藏一些优秀学习资源</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"1、TensorFlow学习资源大全，包括教程，博文，工程等\"><a href=\"#1、TensorFlow学习资源大全，包括教程，博文，工程等\" class=\"headerlink\" title=\"1、TensorFlow学习资源大全，包括教程，博文，工程等\"></a>1、<a href=\"http://blog.jobbole.com/110558/\" target=\"_blank\" rel=\"external\">TensorFlow学习资源大全，包括教程，博文，工程等</a></h1><blockquote>\n<p>tensorflow最近刚好想学，便收藏此等好文</p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>本篇Blog主要收藏一些优秀学习资源</p>\n</blockquote>","more":"<h1 id=\"1、TensorFlow学习资源大全，包括教程，博文，工程等\"><a href=\"#1、TensorFlow学习资源大全，包括教程，博文，工程等\" class=\"headerlink\" title=\"1、TensorFlow学习资源大全，包括教程，博文，工程等\"></a>1、<a href=\"http://blog.jobbole.com/110558/\">TensorFlow学习资源大全，包括教程，博文，工程等</a></h1><blockquote>\n<p>tensorflow最近刚好想学，便收藏此等好文</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0wb1wqx0000sjve8u9tcdt5","category_id":"cj0wb1wr40003sjveb3r63tz9","_id":"cj0wb1wri000bsjve3fnlilxm"},{"post_id":"cj0wb1wrg000asjveih1v2dwa","category_id":"cj0wb1wr40003sjveb3r63tz9","_id":"cj0wb1wrn000gsjved5n5brwz"},{"post_id":"cj0wb1wr20002sjvedb5hwflf","category_id":"cj0wb1wrf0008sjvefxwqry1b","_id":"cj0wb1wro000ksjvebdu242pq"},{"post_id":"cj0wb1wr70005sjvezhlit2ru","category_id":"cj0wb1wrk000dsjvefwygbn8y","_id":"cj0wb1wrp000nsjvetffzf5gw"},{"post_id":"cj0wb1wre0007sjvefljapevy","category_id":"cj0wb1wrn000isjvelh53f3ft","_id":"cj0wb1wrq000ssjvexno7ed0g"},{"post_id":"cj0wb1wri000csjvef906o88c","category_id":"cj0wb1wrq000psjve7g96r229","_id":"cj0wb1wrr000usjve1kn65tba"}],"PostTag":[{"post_id":"cj0wb1wrg000asjveih1v2dwa","tag_id":"cj0wb1wr60004sjvead3ehjrp","_id":"cj0wb1wrl000fsjveraa4q1v2"},{"post_id":"cj0wb1wrg000asjveih1v2dwa","tag_id":"cj0wb1wrf0009sjveb5bh94kx","_id":"cj0wb1wrn000hsjve9q6dn8ae"},{"post_id":"cj0wb1wqx0000sjve8u9tcdt5","tag_id":"cj0wb1wr60004sjvead3ehjrp","_id":"cj0wb1wro000lsjvebw3z4zmg"},{"post_id":"cj0wb1wqx0000sjve8u9tcdt5","tag_id":"cj0wb1wrf0009sjveb5bh94kx","_id":"cj0wb1wrp000msjvembxgford"},{"post_id":"cj0wb1wr20002sjvedb5hwflf","tag_id":"cj0wb1wrk000esjven0tewnrb","_id":"cj0wb1wrq000qsjveup2472w6"},{"post_id":"cj0wb1wr20002sjvedb5hwflf","tag_id":"cj0wb1wrf0009sjveb5bh94kx","_id":"cj0wb1wrq000rsjvenpd5dkem"},{"post_id":"cj0wb1wr70005sjvezhlit2ru","tag_id":"cj0wb1wrp000osjve3ta2wwj5","_id":"cj0wb1wrr000wsjver0fyfnq8"},{"post_id":"cj0wb1wr70005sjvezhlit2ru","tag_id":"cj0wb1wrf0009sjveb5bh94kx","_id":"cj0wb1wrr000xsjveo5r2snmp"},{"post_id":"cj0wb1wre0007sjvefljapevy","tag_id":"cj0wb1wrr000vsjvetieadx0o","_id":"cj0wb1wrs000zsjve93y53o1w"},{"post_id":"cj0wb1wri000csjvef906o88c","tag_id":"cj0wb1wrs000ysjvebdcomz8e","_id":"cj0wb1wrt0011sjveauo27gax"},{"post_id":"cj0wb1wri000csjvef906o88c","tag_id":"cj0wb1wrs0010sjvergsvzhon","_id":"cj0wb1wrt0012sjvepj6ysr48"}],"Tag":[{"name":"iOS","_id":"cj0wb1wr60004sjvead3ehjrp"},{"name":"Dev","_id":"cj0wb1wrf0009sjveb5bh94kx"},{"name":"C/C++","_id":"cj0wb1wrk000esjven0tewnrb"},{"name":"Python","_id":"cj0wb1wrp000osjve3ta2wwj5"},{"name":"使用手册","_id":"cj0wb1wrr000vsjvetieadx0o"},{"name":"网页","_id":"cj0wb1wrs000ysjvebdcomz8e"},{"name":"学习资源","_id":"cj0wb1wrs0010sjvergsvzhon"}]}}